{"name":"octo","version":"0.1.0","description":"Simple and highly flexible JavaScripti API for GitHub API v3","homepage":"http://github.com/caged/octo","keywords":["github","javascript","api","git"],"repository":"https://github.com/Caged/octo","dependencies":{"superagent":"0.4.2","btoa":"*"},"devDependencies":{"docco":"0.3.0","mocha":"1.0.1","should":"0.6.0","connect":"2.1.2","coffee-script":"*","highlight":"0.2.2","express":"2.5.9"},"main":"index","scripts":{"test":"make test"},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_defaultsLoaded":true,"versions":[{"number":"0.1.0","date":"2012-07-07T23:50:04.411Z"}],"readme":"# Octo.js\n\nOcto.js is a simple, flexible, functional JavaScript library for interacting with [GitHub's v3 API](http://developer.github.com/v3).  It runs in node.js apps and the browser.  It supports Basic Auth, OAuth 2, pagination and more.\n\n**Requires [superagent](https://github.com/visionmedia/superagent)** &mdash; A lightweight library for supporting Ajax in the browser and HTTP in node.js.\n\nAll examples are written in [CoffeeScript](http://coffeescript.org), but Octo.js itself is written in JavaScript.\n\n## Quick Example\n\n``` coffeescript\napi = octo.api()\napi.get('/events').on('success', (res) ->\n  pubevents = res.body\n)()\n```\n\n`api.get` sets up a closure, so you'll need to invoke it before the request is sent.\n\n``` coffeescript\nevents = api.get('/events').perpage(50)\n  .on 'end', (res) ->\n    console.log api.limit()\n    console.log events.page() #1\n\nevents()\n```\n\n## Using in the browser\n\nDownload both [superagent](https://github.com/visionmedia/superagent) and octo.js and include them in the `<head>` of your document.\n\n``` html\n  <script src=\"superagent.js\"></script>\n  <script src=\"octo.js\"></script>\n```\n\n## Using in node.js\nInstall using `npm`.\n\n``` shell\nnpm install octo\n```\nRequire octo in your node.js script\n\n```coffeescript\nocto = require 'octo'\n```\n\n## Paging\nOne goal of octo.js was to make paging very simple.  Paging is built right into the library.\n\n``` coffeescript\nevents = api.get('/events').on('success', (res) ->\n  # the current page\n  events.page()\n\n  # requests the next page\n  events.next()\n\n  # requests the previous page\n  events.prev()\n)\nevents()\n```\n\nWhat if you want to start on a different page and limit the number of results per page?\n\n```coffeescript\n# Start on page 5 only returning 10 results per page\napi.get('/events').page(5).perpage(10)()\n```\n\n## Events\nOcto.js supports three events: `\"success\"`, `\"error\"` and `\"end\"`.  These callbacks are registered per pager.  This makes it easy to use the same callbacks for each page you request.\n\n* *`success`* - Response status was in the 200 range\n* *`error`* - Response wasn't in the 200 range\n* *`end`* - Fired at the end of every request, regarldess of status.\n\n```coffeescript\nevents = api.get('/events')\n  .on('success', (res) -> console.log(res.body))\n  .on('error', (res) -> console.log(res.body))\n  .on('end', (res) -> console.log(res.body))()\n```\n\n## Basic Auth\n``` coffeescript\napi = octo.api().username('foo').password('bar')\napi.get('/user').on('success', (res) -> console.log(res.body))()\n```\n\n## OAuth2\nIf you've [registered your script or app](https://github.com/settings/applications/new) as an OAuth app, you can use your token to authenticate with the api.\n\n```coffeescript\napi = octo.api().token('MY APP TOKEN')\napi.get('/user').on('success', (res) -> console.log(res.body))()\n```\n\nThis will work with any registered OAuth application, but will return *unauthorized* if you've not registered your application with GitHub.\n\n### Getting an OAuth 2 token from the API\nGitHub APIv3 allows you to programmatically fetch a token for use in scripts that might not be websites.  Grabbing an OAuth token **requires a username and password**.  Once you have a token, you can use it without a need for your username and password.\n\n```coffeescript\napi = octo.api().username('foo').password('bar')\napi.post('/authorizations', {note: 'my script', scopes: ['public_repo']})\n   .on('success', (res) -> console.log(res.body))()\n```\n\n## Checking Rate limits\nThe GitHub API has a rate limit that's returned with the headers of every request.  You can easily access this info to see your limit and how many requests you have left\n\n```coffeescript\napi.get('/users/caged/repos').on('success', ->\n  # Your limit per hour\n  console.log api.limit()\n\n  # Amount you have remaining in that hour\n  console.log api.remaining()\n)()\n```","created":"2012-07-07T23:50:03.063Z","modified":"2012-07-07T23:50:04.411Z","lastPublisher":{"name":"Caged","email":"justin@labratrevenge.com"},"owners":[{"name":"Caged","email":"justin@labratrevenge.com"}],"other":{"_attachments":{},"_id":"octo","_nodeVersion":"v0.6.17","_npmUser":{"name":"Caged","email":"justin@labratrevenge.com"},"_npmVersion":"1.1.21","_rev":"1-e6adeeaf35140fcead4a463fff46809b","author":{"name":"Justin Palmer","url":"http://labratrevenge.com"},"directories":{},"dist-tags":{"latest":"0.1.0"},"dist":{"shasum":"ffdc916539fd79f5da2a60951723ddd68f4f0d6e","tarball":"http://registry.npmjs.org/octo/-/octo-0.1.0.tgz"},"maintainers":[{"name":"Caged","email":"justin@labratrevenge.com"}],"time":{"modified":"2012-07-07T23:50:04.411Z","created":"2012-07-07T23:50:03.063Z","0.1.0":"2012-07-07T23:50:04.411Z"}}}