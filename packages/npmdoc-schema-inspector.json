{"buildNpmdoc":"schema-inspector","description":"api documentation for [schema-inspector (v1.6.8)](http://atinux.github.io/schema-inspector/) [![npm package](https://img.shields.io/npm/v/npmdoc-schema-inspector.svg?style=flat-square)](https://www.npmjs.org/package/npmdoc-schema-inspector) [![travis-ci.o","devDependencies":{"electron-lite":"github:kaizhu256/node-electron-lite#alpha","schema-inspector":"*","utility2":"github:kaizhu256/node-utility2#alpha"},"engines":{"node":">=4.0"},"homepage":"https://github.com/npmdoc/node-npmdoc-schema-inspector","keywords":["documentation","schema-inspector"],"license":"MIT","main":"lib.npmdoc_schema_inspector.js","name":"npmdoc-schema-inspector","nameAlias":"npmdoc_schema_inspector","nameOriginal":"npmdoc-schema-inspector","os":["darwin","linux"],"repository":"https://github.com/npmdoc/node-npmdoc-schema-inspector","scripts":{"build-ci":"utility2 shReadmeTest build_ci.sh","env":"env","heroku-postbuild":"(set -e; npm install \"kaizhu256/node-utility2#alpha\"; utility2 shDeployHeroku)","postinstall":"if [ -f npm_scripts.sh ]; then ./npm_scripts.sh postinstall; fi","start":"(set -e; export PORT=${PORT:-8080}; utility2 start test.js)","test":"(set -e; export PORT=$(utility2 shServerPortRandom); utility2 test test.js)"},"version":"0.0.1","versions":[{"number":"0.0.1","date":"2017-04-07T11:37:27.144Z"}],"readme":"# api documentation for  [schema-inspector (v1.6.8)](http://atinux.github.io/schema-inspector/)  [![npm package](https://img.shields.io/npm/v/npmdoc-schema-inspector.svg?style=flat-square)](https://www.npmjs.org/package/npmdoc-schema-inspector) [![travis-ci.org build-status](https://api.travis-ci.org/npmdoc/node-npmdoc-schema-inspector.svg)](https://travis-ci.org/npmdoc/node-npmdoc-schema-inspector)\n#### Schema-Inspector is a powerful tool to sanitize and validate JS objects.\n\n[![NPM](https://nodei.co/npm/schema-inspector.png?downloads=true)](https://www.npmjs.com/package/schema-inspector)\n\n[![apidoc](https://npmdoc.github.io/node-npmdoc-schema-inspector/build/screenCapture.buildNpmdoc.browser._2Fhome_2Ftravis_2Fbuild_2Fnpmdoc_2Fnode-npmdoc-schema-inspector_2Ftmp_2Fbuild_2Fapidoc.html.png)](https://npmdoc.github.io/node-npmdoc-schema-inspector/build/apidoc.html)\n\n![npmPackageListing](https://npmdoc.github.io/node-npmdoc-schema-inspector/build/screenCapture.npmPackageListing.svg)\n\n![npmPackageDependencyTree](https://npmdoc.github.io/node-npmdoc-schema-inspector/build/screenCapture.npmPackageDependencyTree.svg)\n\n\n\n# package.json\n\n```json\n\n{\n    \"author\": {\n        \"name\": \"Sebastien Chopin\",\n        \"url\": \"https://twitter.com/atinux\"\n    },\n    \"bugs\": {\n        \"url\": \"https://github.com/Atinux/schema-inspector/issues\"\n    },\n    \"dependencies\": {\n        \"async\": \"^1.5.0\"\n    },\n    \"description\": \"Schema-Inspector is a powerful tool to sanitize and validate JS objects.\",\n    \"devDependencies\": {\n        \"mocha\": \"^2.3.3\",\n        \"should\": \"^7.1.1\"\n    },\n    \"directories\": {},\n    \"dist\": {\n        \"shasum\": \"b9e53983cc55ff2dbd7b65e3dbe085d9d1285f2a\",\n        \"tarball\": \"https://registry.npmjs.org/schema-inspector/-/schema-inspector-1.6.8.tgz\"\n    },\n    \"gitHead\": \"66464e8659923401886a624d20e315b2898d888f\",\n    \"homepage\": \"http://atinux.github.io/schema-inspector/\",\n    \"keywords\": [\n        \"validation\",\n        \"sanitization\",\n        \"inspector\",\n        \"validator\",\n        \"json\",\n        \"validate\",\n        \"sanitize\"\n    ],\n    \"licenses\": [\n        {\n            \"type\": \"MIT\",\n            \"url\": \"https://github.com/Atinux/schema-inspector/raw/master/LICENSE\"\n        }\n    ],\n    \"main\": \"index.js\",\n    \"maintainers\": [\n        {\n            \"name\": \"atinux\",\n            \"email\": \"atinux@gmail.com\"\n        }\n    ],\n    \"name\": \"schema-inspector\",\n    \"optionalDependencies\": {},\n    \"readme\": \"ERROR: No README data found!\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/Atinux/schema-inspector.git\"\n    },\n    \"scripts\": {\n        \"test\": \"make test\"\n    },\n    \"version\": \"1.6.8\"\n}\n```\n\n\n\n# <a name=\"apidoc.tableOfContents\"></a>[table of contents](#apidoc.tableOfContents)\n\n#### [module schema-inspector](#apidoc.module.schema-inspector)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Sanitization (schema, custom)](#apidoc.element.schema-inspector.Sanitization)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Validation (schema, custom)](#apidoc.element.schema-inspector.Validation)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>generate (schema, n)](#apidoc.element.schema-inspector.generate)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>newSanitization (schema, custom)](#apidoc.element.schema-inspector.newSanitization)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>newValidation (schema, custom)](#apidoc.element.schema-inspector.newValidation)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>sanitize (schema, post, custom, callback)](#apidoc.element.schema-inspector.sanitize)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>validate (schema, candidate, custom, callback)](#apidoc.element.schema-inspector.validate)\n1.  object <span class=\"apidocSignatureSpan\">schema-inspector.</span>Sanitization.prototype\n1.  object <span class=\"apidocSignatureSpan\">schema-inspector.</span>Validation.custom\n1.  object <span class=\"apidocSignatureSpan\">schema-inspector.</span>Validation.prototype\n\n#### [module schema-inspector.Sanitization](#apidoc.module.schema-inspector.Sanitization)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Sanitization (schema, custom)](#apidoc.element.schema-inspector.Sanitization.Sanitization)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.</span>extend (custom)](#apidoc.element.schema-inspector.Sanitization.extend)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.</span>remove (fields)](#apidoc.element.schema-inspector.Sanitization.remove)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.</span>reset ()](#apidoc.element.schema-inspector.Sanitization.reset)\n1.  object <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.</span>custom\n\n#### [module schema-inspector.Sanitization.prototype](#apidoc.module.schema-inspector.Sanitization.prototype)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>_asyncSanitize (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype._asyncSanitize)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>_sanitize (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype._sanitize)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>asyncExec (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.asyncExec)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>asyncItems (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.asyncItems)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>asyncProperties (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.asyncProperties)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>exec (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.exec)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>items (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.items)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>max (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.max)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>maxLength (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.maxLength)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>min (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.min)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>minLength (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.minLength)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>optional (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.optional)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>properties (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.properties)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>rules (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.rules)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>sanitize (post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.sanitize)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>strict (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.strict)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>type (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.type)\n\n#### [module schema-inspector.Validation](#apidoc.module.schema-inspector.Validation)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Validation (schema, custom)](#apidoc.element.schema-inspector.Validation.Validation)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.</span>extend (custom)](#apidoc.element.schema-inspector.Validation.extend)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.</span>remove (fields)](#apidoc.element.schema-inspector.Validation.remove)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.</span>reset ()](#apidoc.element.schema-inspector.Validation.reset)\n1.  object <span class=\"apidocSignatureSpan\">schema-inspector.Validation.</span>custom\n\n#### [module schema-inspector.Validation.custom](#apidoc.module.schema-inspector.Validation.custom)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.custom.</span>type (schema, candidate)](#apidoc.element.schema-inspector.Validation.custom.type)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.custom.</span>unique (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.custom.unique)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.custom.</span>validDate (schema, date)](#apidoc.element.schema-inspector.Validation.custom.validDate)\n\n#### [module schema-inspector.Validation.prototype](#apidoc.module.schema-inspector.Validation.prototype)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>_asyncValidate (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype._asyncValidate)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>_validate (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype._validate)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>asyncExec (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.asyncExec)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>asyncItems (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.asyncItems)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>asyncProperties (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.asyncProperties)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>eq (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.eq)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>exactLength (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.exactLength)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>exec (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.exec)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>gt (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.gt)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>gte (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.gte)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>items (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.items)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>lt (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.lt)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>lte (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.lte)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>maxLength (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.maxLength)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>minLength (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.minLength)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>ne (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.ne)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>optional (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.optional)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>pattern (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.pattern)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>properties (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.properties)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>someKeys (schema, candidat)](#apidoc.element.schema-inspector.Validation.prototype.someKeys)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>strict (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.strict)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>type (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.type)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>uniqueness (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.uniqueness)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>validDate (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.validDate)\n1.  [function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>validate (candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.validate)\n\n\n\n# <a name=\"apidoc.module.schema-inspector\"></a>[module schema-inspector](#apidoc.module.schema-inspector)\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Sanitization (schema, custom)](#apidoc.element.schema-inspector.Sanitization)\n- description and source-code\n```javascript\nfunction Sanitization(schema, custom) {\n\t\tInspection.prototype.constructor.call(this, schema, _merge(Sanitization.custom, custom));\n\t\tvar _reporting = [];\n\n\t\tthis._basicFields = Object.keys(_sanitizationAttribut);\n\t\tthis._customFields = Object.keys(this._custom);\n\t\tthis.origin = null;\n\n\t\tthis.report = function (message) {\n\t\t\tvar newNot = {\n\t\t\t\t\tmessage: message || 'was sanitized',\n\t\t\t\t\tproperty: this.userAlias ? (this.userAlias + ' (' + this._dumpStack() + ')') : this._dumpStack()\n\t\t\t};\n\t\t\tif (!_reporting.some(function (e) { return e.property === newNot.property; })) {\n\t\t\t\t_reporting.push(newNot);\n\t\t\t}\n\t\t};\n\n\t\tthis.result = function (data) {\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\treporting: _reporting,\n\t\t\t\tformat: function () {\n\t\t\t\t\treturn this.reporting.map(function (i) {\n\t\t\t\t\t\treturn 'Property ' + i.property + ' ' + i.message;\n\t\t\t\t\t}).join('\\n');\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Validation (schema, custom)](#apidoc.element.schema-inspector.Validation)\n- description and source-code\n```javascript\nfunction Validation(schema, custom) {\n\t\tInspection.prototype.constructor.call(this, schema, _merge(Validation.custom, custom));\n\t\tvar _error = [];\n\n\t\tthis._basicFields = Object.keys(_validationAttribut);\n\t\tthis._customFields = Object.keys(this._custom);\n\t\tthis.origin = null;\n\n\t\tthis.report = function (message, code, reason) {\n\t\t\tvar newErr = {\n\t\t\t\tcode: code || this.userCode || null,\n\t\t\t\treason: reason || 'unknown',\n\t\t\t\tmessage: this.userError || message || 'is invalid',\n\t\t\t\tproperty: this.userAlias ? (this.userAlias + ' (' + this._dumpStack() + ')') : this._dumpStack()\n\t\t\t};\n\t\t\t_error.push(newErr);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.result = function () {\n\t\t\treturn {\n\t\t\t\terror: _error,\n\t\t\t\tvalid: _error.length === 0,\n\t\t\t\tformat: function () {\n\t\t\t\t\tif (this.valid === true) {\n\t\t\t\t\t\treturn 'Candidate is valid';\n\t\t\t\t\t}\n\t\t\t\t\treturn this.error.map(function (i) {\n\t\t\t\t\t\treturn 'Property ' + i.property + ': ' + i.message;\n\t\t\t\t\t}).join('\\n');\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.generate\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>generate (schema, n)](#apidoc.element.schema-inspector.generate)\n- description and source-code\n```javascript\ngenerate = function (schema, n) {\n\t\tif (typeof n === 'number') {\n\t\t\tvar r = new Array(n);\n\t\t\tfor (var i = 0; i < n; i++) {\n\t\t\t\tr[i] = CandidateGenerator.instance().generate(schema);\n\t\t\t}\n\t\t\treturn r;\n\t\t}\n\t\treturn CandidateGenerator.instance().generate(schema);\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.newSanitization\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>newSanitization (schema, custom)](#apidoc.element.schema-inspector.newSanitization)\n- description and source-code\n```javascript\nnewSanitization = function (schema, custom) {\n\t\treturn new Sanitization(schema, custom);\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.newValidation\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>newValidation (schema, custom)](#apidoc.element.schema-inspector.newValidation)\n- description and source-code\n```javascript\nnewValidation = function (schema, custom) {\n\t\treturn new Validation(schema, custom);\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.sanitize\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>sanitize (schema, post, custom, callback)](#apidoc.element.schema-inspector.sanitize)\n- description and source-code\n```javascript\nsanitize = function (schema, post, custom, callback) {\n\t\tif (arguments.length === 3 && typeof custom === 'function') {\n\t\t\tcallback = custom;\n\t\t\tcustom = null;\n\t\t}\n\t\treturn new Sanitization(schema, custom).sanitize(post, callback);\n\t}\n```\n- example usage\n```shell\n...\n\t\t\tsplitWith: ',',\n\t\t\titems: { type: 'string', rules: ['trim', 'title'] }\n\t\t},\n\t\temail: { type: 'string', rules: ['trim', 'lower'] }\n\t}\n};\n// Let's update the data\ninspector.sanitize(sanitization, data);\n/*\ndata is now:\n{\n\tfirstname: 'Sterling',\n\tlastname: 'Archer',\n\tjobs: ['Special Agent', 'Cocaine Dealer'],\n\temail: 'never!'\n...\n```\n\n#### <a name=\"apidoc.element.schema-inspector.validate\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>validate (schema, candidate, custom, callback)](#apidoc.element.schema-inspector.validate)\n- description and source-code\n```javascript\nvalidate = function (schema, candidate, custom, callback) {\n\t\tif (arguments.length === 3 && typeof custom === 'function') {\n\t\t\tcallback = custom;\n\t\t\tcustom = null;\n\t\t}\n\t\treturn new Validation(schema, custom).validate(candidate, callback);\n\t}\n```\n- example usage\n```shell\n...\n\t\tjobs: {\n\t\t\ttype: 'array',\n\t\t\titems: { type: 'string', minLength: 1 }\n\t\t},\n\t\temail: { type: 'string', pattern: 'email' }\n\t}\n};\nvar result = inspector.validate(validation, data);\nif (!result.valid)\n\tconsole.log(result.format());\n/*\n\tProperty @.email: must match [email], but is equal to \"never!\"\n*/\n'''\n...\n```\n\n\n\n# <a name=\"apidoc.module.schema-inspector.Sanitization\"></a>[module schema-inspector.Sanitization](#apidoc.module.schema-inspector.Sanitization)\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.Sanitization\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Sanitization (schema, custom)](#apidoc.element.schema-inspector.Sanitization.Sanitization)\n- description and source-code\n```javascript\nfunction Sanitization(schema, custom) {\n\t\tInspection.prototype.constructor.call(this, schema, _merge(Sanitization.custom, custom));\n\t\tvar _reporting = [];\n\n\t\tthis._basicFields = Object.keys(_sanitizationAttribut);\n\t\tthis._customFields = Object.keys(this._custom);\n\t\tthis.origin = null;\n\n\t\tthis.report = function (message) {\n\t\t\tvar newNot = {\n\t\t\t\t\tmessage: message || 'was sanitized',\n\t\t\t\t\tproperty: this.userAlias ? (this.userAlias + ' (' + this._dumpStack() + ')') : this._dumpStack()\n\t\t\t};\n\t\t\tif (!_reporting.some(function (e) { return e.property === newNot.property; })) {\n\t\t\t\t_reporting.push(newNot);\n\t\t\t}\n\t\t};\n\n\t\tthis.result = function (data) {\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\treporting: _reporting,\n\t\t\t\tformat: function () {\n\t\t\t\t\treturn this.reporting.map(function (i) {\n\t\t\t\t\t\treturn 'Property ' + i.property + ' ' + i.message;\n\t\t\t\t\t}).join('\\n');\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.extend\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.</span>extend (custom)](#apidoc.element.schema-inspector.Sanitization.extend)\n- description and source-code\n```javascript\nextend = function (custom) {\n\t\t\treturn _extend(this.custom, custom);\n\t\t}\n```\n- example usage\n```shell\n...\n---------------------------------------\n\n<a name=\"cf_extension\" />\n### extension\n\nSometime you want to use a custom field everywhere in your program, so you may\nextend Schema-Inspector to do so. Just call the method\n_inspector.Validation.extend(customFieldObject)_ or\n_inspector.Sanitization.extend(customFieldObject)_. If you want to reset, simply call\n_inspector.Validation.reset()_ or _inspector.Sanitization.reset()_. You also can remove a\nspecific field by calling _inspector.Validation.remove(field)_ or\n_inspector.Sanitization.remove(field)_.\n\n__Example__\n...\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.remove\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.</span>remove (fields)](#apidoc.element.schema-inspector.Sanitization.remove)\n- description and source-code\n```javascript\nremove = function (fields) {\n\t\t\tif (!_typeIs.array(fields)) {\n\t\t\t\tfields = [fields];\n\t\t\t}\n\t\t\tfields.forEach(function (field) {\n\t\t\t\tdelete this.custom[field];\n\t\t\t}, this);\n\t\t}\n```\n- example usage\n```shell\n...\n### extension\n\nSometime you want to use a custom field everywhere in your program, so you may\nextend Schema-Inspector to do so. Just call the method\n_inspector.Validation.extend(customFieldObject)_ or\n_inspector.Sanitization.extend(customFieldObject)_. If you want to reset, simply call\n_inspector.Validation.reset()_ or _inspector.Sanitization.reset()_. You also can remove a\nspecific field by calling _inspector.Validation.remove(field)_ or\n_inspector.Sanitization.remove(field)_.\n\n__Example__\n\n'''javascript\nvar inspector = require('schema-inspector');\n...\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.reset\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.</span>reset ()](#apidoc.element.schema-inspector.Sanitization.reset)\n- description and source-code\n```javascript\nreset = function () {\n\t\t\tthis.custom = {};\n\t\t}\n```\n- example usage\n```shell\n...\n<a name=\"cf_extension\" />\n### extension\n\nSometime you want to use a custom field everywhere in your program, so you may\nextend Schema-Inspector to do so. Just call the method\n_inspector.Validation.extend(customFieldObject)_ or\n_inspector.Sanitization.extend(customFieldObject)_. If you want to reset, simply call\n_inspector.Validation.reset()_ or _inspector.Sanitization.reset()_. You also can remove a\nspecific field by calling _inspector.Validation.remove(field)_ or\n_inspector.Sanitization.remove(field)_.\n\n__Example__\n\n'''javascript\nvar inspector = require('schema-inspector');\n...\n```\n\n\n\n# <a name=\"apidoc.module.schema-inspector.Sanitization.prototype\"></a>[module schema-inspector.Sanitization.prototype](#apidoc.module.schema-inspector.Sanitization.prototype)\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype._asyncSanitize\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>_asyncSanitize (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype._asyncSanitize)\n- description and source-code\n```javascript\n_asyncSanitize = function (schema, post, callback) {\n\t\tvar self = this;\n\t\tthis.userAlias = schema.alias || null;\n\n\t\tasync.waterfall([\n\t\t\tfunction (next) {\n\t\t\t\tasync.reduce(self._basicFields, post, function (value, i, next) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif ((i in schema || i === 'optional') && typeof self[i] === 'function') {\n\t\t\t\t\t\t\tif (self[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self[i](schema, value, next);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalue = self[i](schema, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext(null, value);\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t},\n\t\t\tfunction (inter, next) {\n\t\t\t\tasync.reduce(self._customFields, inter, function (value, i, next) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif (i in schema && typeof self._custom[i] === 'function') {\n\t\t\t\t\t\t\tif (self._custom[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self._custom[i].call(self, schema, value, next);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalue = self._custom[i].call(self, schema, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext(null, value);\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t}\n\t\t], callback);\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype._sanitize\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>_sanitize (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype._sanitize)\n- description and source-code\n```javascript\n_sanitize = function (schema, post) {\n\t\tthis.userAlias = schema.alias || null;\n\t\tthis._basicFields.forEach(function (i) {\n\t\t\tif ((i in schema || i === 'optional') && typeof this[i] === 'function') {\n\t\t\t\tpost = this[i](schema, post);\n\t\t\t}\n\t\t}, this);\n\t\tthis._customFields.forEach(function (i) {\n\t\t\tif (i in schema && typeof this._custom[i] === 'function') {\n\t\t\t\tpost = this._custom[i].call(this, schema, post);\n\t\t\t}\n\t\t}, this);\n\t\treturn post;\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.asyncExec\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>asyncExec (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.asyncExec)\n- description and source-code\n```javascript\nasyncExec = function (schema, post, callback) {\n\t\t\tvar self = this;\n\t\t\tvar execs = _typeIs.array(schema.exec) ? schema.exec : [schema.exec];\n\n\t\t\tasync.eachSeries(execs, function (exec, done) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\tif (exec.length > 2) {\n\t\t\t\t\t\treturn exec.call(self, schema, post, function (err, res) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn done(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpost = res;\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tpost = exec.call(self, schema, post);\n\t\t\t\t}\n\t\t\t\tdone();\n\t\t\t}, function (err) {\n\t\t\t\tcallback(err, post);\n\t\t\t});\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.asyncItems\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>asyncItems (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.asyncItems)\n- description and source-code\n```javascript\nasyncItems = function (schema, post, callback) {\n\t\t\tif (!(schema.items instanceof Object) || !(post instanceof Object)) {\n\t\t\t\treturn callback(null, post);\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar items = schema.items;\n\t\t\tif (_typeIs.array(items) && _typeIs.array(post)) {\n\t\t\t\tvar minLength = items.length < post.length ? items.length : post.length;\n\t\t\t\tasync.timesSeries(minLength, function (i, next) {\n\t\t\t\t\tself._deeperArray(i);\n\t\t\t\t\tself._asyncSanitize(items[i], post[i], function (err, res) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn next(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpost[i] = res;\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t}, function (err) {\n\t\t\t\t\tcallback(err, post);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tasync.eachSeries(Object.keys(post), function (key, next) {\n\t\t\t\t\tself._deeperArray(key);\n\t\t\t\t\tself._asyncSanitize(items, post[key], function (err, res) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn next();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpost[key] = res;\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t}, function (err) {\n\t\t\t\t\tcallback(err, post);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.asyncProperties\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>asyncProperties (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.asyncProperties)\n- description and source-code\n```javascript\nasyncProperties = function (schema, post, callback) {\n\t\t\tif (!post || typeof post !== 'object') {\n\t\t\t\treturn callback(null, post);\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar properties = schema.properties;\n\n\t\t\tasync.series([\n\t\t\t\tfunction (next) {\n\t\t\t\t\tif (properties['*'] == null) {\n\t\t\t\t\t\treturn next();\n\t\t\t\t\t}\n\t\t\t\t\tvar globing = properties['*'];\n\t\t\t\t\tasync.eachSeries(Object.keys(post), function (i, next) {\n\t\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\t\treturn next();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncSanitize(globing, post[i], function (err, res) {\n\t\t\t\t\t\t\tif (err) { /* Error can safely be ignored here */ }\n\t\t\t\t\t\t\tif (typeof res !== 'undefined') {\n\t\t\t\t\t\t\t\tpost[i] = res;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t},\n\t\t\t\tfunction (next) {\n\t\t\t\t\tasync.eachSeries(Object.keys(properties), function (i, next) {\n\t\t\t\t\t\tif (i === '*') {\n\t\t\t\t\t\t\treturn next();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncSanitize(properties[i], post[i], function (err, res) {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\treturn next(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (typeof res !== 'undefined') {\n\t\t\t\t\t\t\t\tpost[i] = res;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t}\n\t\t\t], function (err) {\n\t\t\t\treturn callback(err, post);\n\t\t\t});\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.exec\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>exec (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.exec)\n- description and source-code\n```javascript\nexec = function (schema, post, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncExec(schema, post, callback);\n\t\t\t}\n\t\t\tvar execs = _typeIs.array(schema.exec) ? schema.exec : [schema.exec];\n\n\t\t\texecs.forEach(function (exec) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\tpost = exec.call(this, schema, post);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.items\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>items (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.items)\n- description and source-code\n```javascript\nitems = function (schema, post, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncItems(schema, post, callback);\n\t\t\t}\n\t\t\tif (!(schema.items instanceof Object) || !(post instanceof Object)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar i;\n\t\t\tif (_typeIs.array(schema.items) && _typeIs.array(post)) {\n\t\t\t\tvar minLength = schema.items.length < post.length ? schema.items.length : post.length;\n\t\t\t\tfor (i = 0; i < minLength; i++) {\n\t\t\t\t\tthis._deeperArray(i);\n\t\t\t\t\tpost[i] = this._sanitize(schema.items[i], post[i]);\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (i in post) {\n\t\t\t\t\tif(post.hasOwnProperty(i)){\n\t\t\t\t\t\tthis._deeperArray(i);\n\t\t\t\t\t\tpost[i] = this._sanitize(schema.items, post[i]);\n\t\t\t\t\t\tthis._back();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.max\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>max (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.max)\n- description and source-code\n```javascript\nmax = function (schema, post) {\n\t\t\tvar postTest = Number(post);\n\t\t\tif (isNaN(postTest)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar max = Number(schema.max);\n\t\t\tif (isNaN(max)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (postTest > max) {\n\t\t\t\tthis.report();\n\t\t\t\treturn max;\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.maxLength\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>maxLength (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.maxLength)\n- description and source-code\n```javascript\nmaxLength = function (schema, post) {\n\t\t\tvar limit = Number(schema.maxLength);\n\t\t\tif (typeof post !== 'string' || isNaN(limit) || limit < 0) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (post.length > limit) {\n\t\t\t\tthis.report();\n\t\t\t\treturn post.slice(0, limit);\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.min\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>min (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.min)\n- description and source-code\n```javascript\nmin = function (schema, post) {\n\t\t\tvar postTest = Number(post);\n\t\t\tif (isNaN(postTest)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar min = Number(schema.min);\n\t\t\tif (isNaN(min)) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (postTest < min) {\n\t\t\t\tthis.report();\n\t\t\t\treturn min;\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.minLength\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>minLength (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.minLength)\n- description and source-code\n```javascript\nminLength = function (schema, post) {\n\t\t\tvar limit = Number(schema.minLength);\n\t\t\tif (typeof post !== 'string' || isNaN(limit) || limit < 0) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar str = '';\n\t\t\tvar gap = limit - post.length;\n\t\t\tif (gap > 0) {\n\t\t\t\tfor (var i = 0; i < gap; i++) {\n\t\t\t\t\tstr += '-';\n\t\t\t\t}\n\t\t\t\tthis.report();\n\t\t\t\treturn post + str;\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.optional\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>optional (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.optional)\n- description and source-code\n```javascript\noptional = function (schema, post) {\n\t\t\tvar opt = typeof schema.optional === 'boolean' ? schema.optional : (schema.optional !== 'false'); // Default: true\n\t\t\tif (opt === true) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tif (typeof post !== 'undefined') {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tthis.report();\n\t\t\tif (schema.def === Date) {\n\t\t\t\treturn new Date();\n\t\t\t}\n\t\t\treturn schema.def;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.properties\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>properties (schema, post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.properties)\n- description and source-code\n```javascript\nproperties = function (schema, post, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncProperties(schema, post, callback);\n\t\t\t}\n\t\t\tif (!post || typeof post !== 'object') {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar properties = schema.properties;\n\t\t\tvar tmp;\n\t\t\tvar i;\n\t\t\tif (typeof properties['*'] !== 'undefined') {\n\t\t\t\tfor (i in post) {\n\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._deeperObject(i);\n\t\t\t\t\ttmp = this._sanitize(schema.properties['*'], post[i]);\n\t\t\t\t\tif (typeof tmp !== 'undefined') {\n\t\t\t\t\t\tpost[i]= tmp;\n\t\t\t\t\t}\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i in schema.properties) {\n\t\t\t\tif (i !== '*') {\n\t\t\t\t\tthis._deeperObject(i);\n\t\t\t\t\ttmp = this._sanitize(schema.properties[i], post[i]);\n\t\t\t\t\tif (typeof tmp !== 'undefined') {\n\t\t\t\t\t\tpost[i]= tmp;\n\t\t\t\t\t}\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.rules\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>rules (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.rules)\n- description and source-code\n```javascript\nrules = function (schema, post) {\n\t\t\tvar rules = schema.rules;\n\t\t\tif (typeof post !== 'string' || (typeof rules !== 'string' && !_typeIs.array(rules))) {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar modified = false;\n\t\t\t(_typeIs.array(rules) ? rules : [rules]).forEach(function (rule) {\n\t\t\t\tif (typeof _applyRules[rule] === 'function') {\n\t\t\t\t\tpost = _applyRules[rule](post);\n\t\t\t\t\tmodified = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (modified) {\n\t\t\t\tthis.report();\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.sanitize\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>sanitize (post, callback)](#apidoc.element.schema-inspector.Sanitization.prototype.sanitize)\n- description and source-code\n```javascript\nsanitize = function (post, callback) {\n\t\tthis.origin = post;\n\t\tif (typeof callback === 'function') {\n\t\t\tvar self = this;\n\t\t\treturn this._asyncSanitize(this._schema, post, function (err, data) {\n\t\t\t\tself.origin = null;\n\t\t\t\tcallback(err, self.result(data));\n\t\t\t});\n\t\t}\n\t\tvar data = this._sanitize(this._schema, post);\n\t\tthis.origin = null;\n\t\treturn this.result(data);\n\t}\n```\n- example usage\n```shell\n...\n\t\t\tsplitWith: ',',\n\t\t\titems: { type: 'string', rules: ['trim', 'title'] }\n\t\t},\n\t\temail: { type: 'string', rules: ['trim', 'lower'] }\n\t}\n};\n// Let's update the data\ninspector.sanitize(sanitization, data);\n/*\ndata is now:\n{\n\tfirstname: 'Sterling',\n\tlastname: 'Archer',\n\tjobs: ['Special Agent', 'Cocaine Dealer'],\n\temail: 'never!'\n...\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.strict\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>strict (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.strict)\n- description and source-code\n```javascript\nstrict = function (schema, post) {\n\t\t\tif (typeof schema.strict === 'string') { schema.strict = (schema.strict === 'true'); }\n\t\t\tif (schema.strict !== true)\n\t\t\t\treturn post;\n\t\t\tif (!_typeIs.object(schema.properties))\n\t\t\t\treturn post;\n\t\t\tif (!_typeIs.object(post))\n\t\t\t\treturn post;\n\t\t\tvar that = this;\n\t\t\tObject.keys(post).forEach(function (key) {\n\t\t\t\tif (!(key in schema.properties)) {\n\t\t\t\t\tdelete post[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Sanitization.prototype.type\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Sanitization.prototype.</span>type (schema, post)](#apidoc.element.schema-inspector.Sanitization.prototype.type)\n- description and source-code\n```javascript\ntype = function (schema, post) {\n\t\t\t// if (_typeIs['object'](post) || _typeIs.array(post)) {\n\t\t\t// \treturn post;\n\t\t\t// }\n\t\t\tif (typeof schema.type !== 'string' || typeof _forceType[schema.type] !== 'function') {\n\t\t\t\treturn post;\n\t\t\t}\n\t\t\tvar n;\n\t\t\tvar opt = typeof schema.optional === 'boolean' ? schema.optional : true;\n\t\t\tif (typeof _forceType[schema.type] === 'function') {\n\t\t\t\tn = _forceType[schema.type](post, schema);\n\t\t\t\tif ((n === null && !opt) || (!n && isNaN(n)) || (n === null && schema.type === 'string')) {\n\t\t\t\t\tn = schema.def;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!opt) {\n\t\t\t\tn = schema.def;\n\t\t\t}\n\t\t\tif ((n != null || (typeof schema.def !== 'undefined' && schema.def === n)) && n !== post) {\n\t\t\t\tthis.report();\n\t\t\t\treturn n;\n\t\t\t}\n\t\t\treturn post;\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n\n\n# <a name=\"apidoc.module.schema-inspector.Validation\"></a>[module schema-inspector.Validation](#apidoc.module.schema-inspector.Validation)\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.Validation\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.</span>Validation (schema, custom)](#apidoc.element.schema-inspector.Validation.Validation)\n- description and source-code\n```javascript\nfunction Validation(schema, custom) {\n\t\tInspection.prototype.constructor.call(this, schema, _merge(Validation.custom, custom));\n\t\tvar _error = [];\n\n\t\tthis._basicFields = Object.keys(_validationAttribut);\n\t\tthis._customFields = Object.keys(this._custom);\n\t\tthis.origin = null;\n\n\t\tthis.report = function (message, code, reason) {\n\t\t\tvar newErr = {\n\t\t\t\tcode: code || this.userCode || null,\n\t\t\t\treason: reason || 'unknown',\n\t\t\t\tmessage: this.userError || message || 'is invalid',\n\t\t\t\tproperty: this.userAlias ? (this.userAlias + ' (' + this._dumpStack() + ')') : this._dumpStack()\n\t\t\t};\n\t\t\t_error.push(newErr);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.result = function () {\n\t\t\treturn {\n\t\t\t\terror: _error,\n\t\t\t\tvalid: _error.length === 0,\n\t\t\t\tformat: function () {\n\t\t\t\t\tif (this.valid === true) {\n\t\t\t\t\t\treturn 'Candidate is valid';\n\t\t\t\t\t}\n\t\t\t\t\treturn this.error.map(function (i) {\n\t\t\t\t\t\treturn 'Property ' + i.property + ': ' + i.message;\n\t\t\t\t\t}).join('\\n');\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.extend\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.</span>extend (custom)](#apidoc.element.schema-inspector.Validation.extend)\n- description and source-code\n```javascript\nextend = function (custom) {\n\t\t\treturn _extend(this.custom, custom);\n\t\t}\n```\n- example usage\n```shell\n...\n---------------------------------------\n\n<a name=\"cf_extension\" />\n### extension\n\nSometime you want to use a custom field everywhere in your program, so you may\nextend Schema-Inspector to do so. Just call the method\n_inspector.Validation.extend(customFieldObject)_ or\n_inspector.Sanitization.extend(customFieldObject)_. If you want to reset, simply call\n_inspector.Validation.reset()_ or _inspector.Sanitization.reset()_. You also can remove a\nspecific field by calling _inspector.Validation.remove(field)_ or\n_inspector.Sanitization.remove(field)_.\n\n__Example__\n...\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.remove\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.</span>remove (fields)](#apidoc.element.schema-inspector.Validation.remove)\n- description and source-code\n```javascript\nremove = function (fields) {\n\t\t\tif (!_typeIs.array(fields)) {\n\t\t\t\tfields = [fields];\n\t\t\t}\n\t\t\tfields.forEach(function (field) {\n\t\t\t\tdelete this.custom[field];\n\t\t\t}, this);\n\t\t}\n```\n- example usage\n```shell\n...\n### extension\n\nSometime you want to use a custom field everywhere in your program, so you may\nextend Schema-Inspector to do so. Just call the method\n_inspector.Validation.extend(customFieldObject)_ or\n_inspector.Sanitization.extend(customFieldObject)_. If you want to reset, simply call\n_inspector.Validation.reset()_ or _inspector.Sanitization.reset()_. You also can remove a\nspecific field by calling _inspector.Validation.remove(field)_ or\n_inspector.Sanitization.remove(field)_.\n\n__Example__\n\n'''javascript\nvar inspector = require('schema-inspector');\n...\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.reset\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.</span>reset ()](#apidoc.element.schema-inspector.Validation.reset)\n- description and source-code\n```javascript\nreset = function () {\n\t\t\tthis.custom = {};\n\t\t}\n```\n- example usage\n```shell\n...\n<a name=\"cf_extension\" />\n### extension\n\nSometime you want to use a custom field everywhere in your program, so you may\nextend Schema-Inspector to do so. Just call the method\n_inspector.Validation.extend(customFieldObject)_ or\n_inspector.Sanitization.extend(customFieldObject)_. If you want to reset, simply call\n_inspector.Validation.reset()_ or _inspector.Sanitization.reset()_. You also can remove a\nspecific field by calling _inspector.Validation.remove(field)_ or\n_inspector.Sanitization.remove(field)_.\n\n__Example__\n\n'''javascript\nvar inspector = require('schema-inspector');\n...\n```\n\n\n\n# <a name=\"apidoc.module.schema-inspector.Validation.custom\"></a>[module schema-inspector.Validation.custom](#apidoc.module.schema-inspector.Validation.custom)\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.custom.type\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.custom.</span>type (schema, candidate)](#apidoc.element.schema-inspector.Validation.custom.type)\n- description and source-code\n```javascript\ntype = function (schema, candidate) {\n\t\tvar result;\n\t\t// Custom type\n\t\tif (schema.$type === 'person')\n\t\t\tresult = inspector.validate(personValidation, candidate);\n\t\t// Basic type\n\t\telse\n\t\t\tresult = inspector.validate({ type: schema.$type }, candidate);\n\t\tif (!result.valid)\n\t\t\treturn this.report(result.format());\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.custom.unique\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.custom.</span>unique (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.custom.unique)\n- description and source-code\n```javascript\nunique = function (schema, candidate, callback) {\n\t\tconsole.log(this.origin._connection);\n    callback();\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.custom.validDate\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.custom.</span>validDate (schema, date)](#apidoc.element.schema-inspector.Validation.custom.validDate)\n- description and source-code\n```javascript\nvalidDate = function (schema, date) {\n    if (schema.$validDate === true\n       && Object.prototype.toString.call(date) === \"[object Date]\"\n       && isNaN(date.getTime())) {\n        this.report('must be a valid date');\n    }\n}\n```\n- example usage\n```shell\nn/a\n```\n\n\n\n# <a name=\"apidoc.module.schema-inspector.Validation.prototype\"></a>[module schema-inspector.Validation.prototype](#apidoc.module.schema-inspector.Validation.prototype)\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype._asyncValidate\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>_asyncValidate (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype._asyncValidate)\n- description and source-code\n```javascript\n_asyncValidate = function (schema, candidate, callback) {\n\t\tvar self = this;\n\t\tthis.userCode = schema.code || null;\n\t\tthis.userError = schema.error || null;\n\t\tthis.userAlias = schema.alias || null;\n\n\t\tasync.series([\n\t\t\tfunction (next) {\n\t\t\t\tasync.eachSeries(Object.keys(_validationAttribut), function (i, done) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif ((i in schema || i === 'optional') && typeof self[i] === 'function') {\n\t\t\t\t\t\t\tif (self[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self[i](schema, candidate, done);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself[i](schema, candidate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t},\n\t\t\tfunction (next) {\n\t\t\t\tasync.eachSeries(Object.keys(self._custom), function (i, done) {\n\t\t\t\t\tasync.nextTick(function () {\n\t\t\t\t\t\tif (i in schema && typeof self._custom[i] === 'function') {\n\t\t\t\t\t\t\tif (self._custom[i].length > 2) {\n\t\t\t\t\t\t\t\treturn self._custom[i].call(self, schema, candidate, done);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself._custom[i].call(self, schema, candidate);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t}, next);\n\t\t\t}\n\t\t], callback);\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype._validate\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>_validate (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype._validate)\n- description and source-code\n```javascript\n_validate = function (schema, candidate, callback) {\n\t\tthis.userCode = schema.code || null;\n\t\tthis.userError = schema.error || null;\n\t\tthis.userAlias = schema.alias || null;\n\t\tthis._basicFields.forEach(function (i) {\n\t\t\tif ((i in schema || i === 'optional') && typeof this[i] === 'function') {\n\t\t\t\tthis[i](schema, candidate);\n\t\t\t}\n\t\t}, this);\n\t\tthis._customFields.forEach(function (i) {\n\t\t\tif (i in schema && typeof this._custom[i] === 'function') {\n\t\t\t\tthis._custom[i].call(this, schema, candidate);\n\t\t\t}\n\t\t}, this);\n\t\treturn this;\n\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.asyncExec\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>asyncExec (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.asyncExec)\n- description and source-code\n```javascript\nasyncExec = function (schema, candidate, callback) {\n\t\t\tvar self = this;\n\t\t\tasync.eachSeries(_typeIs.array(schema.exec) ? schema.exec : [schema.exec], function (exec, done) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\tif (exec.length > 2) {\n\t\t\t\t\t\treturn exec.call(self, schema, candidate, done);\n\t\t\t\t\t}\n\t\t\t\t\texec.call(self, schema, candidate);\n\t\t\t\t}\n\t\t\t\tasync.nextTick(done);\n\t\t\t}, callback);\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.asyncItems\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>asyncItems (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.asyncItems)\n- description and source-code\n```javascript\nasyncItems = function (schema, candidate, callback) {\n\t\t\tif (!(schema.items instanceof Object) || !(candidate instanceof Object)) {\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar items = schema.items;\n\t\t\tvar i, l;\n\n\t\t\tif (_typeIs.array(items) && _typeIs.array(candidate)) {\n\t\t\t\tasync.timesSeries(items.length, function (i, done) {\n\t\t\t\t\tself._deeperArray(i);\n\t\t\t\t\tself._asyncValidate(items[i], candidate[i], function (err, res) {\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tdone(err, res);\n\t\t\t\t\t});\n\t\t\t\t\tself._back();\n\t\t\t\t}, callback);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tasync.eachSeries(Object.keys(candidate), function (key, done) {\n\t\t\t\t\tself._deeperArray(key);\n\t\t\t\t\tself._asyncValidate(items, candidate[key], function (err, res) {\n\t\t\t\t\t\tself._back();\n\t\t\t\t\t\tdone(err, res);\n\t\t\t\t\t});\n\t\t\t\t}, callback);\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.asyncProperties\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>asyncProperties (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.asyncProperties)\n- description and source-code\n```javascript\nasyncProperties = function (schema, candidate, callback) {\n\t\t\tif (!(schema.properties instanceof Object) || !_typeIs.object(candidate)) {\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tvar properties = schema.properties;\n\t\t\tasync.series([\n\t\t\t\tfunction (next) {\n\t\t\t\t\tif (properties['*'] == null) {\n\t\t\t\t\t\treturn next();\n\t\t\t\t\t}\n\t\t\t\t\tasync.eachSeries(Object.keys(candidate), function (i, done) {\n\t\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\t\treturn async.nextTick(done);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncValidate(properties['*'], candidate[i], function (err) {\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tdone(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t},\n\t\t\t\tfunction (next) {\n\t\t\t\t\tasync.eachSeries(Object.keys(properties), function (i, done) {\n\t\t\t\t\t\tif (i === '*') {\n\t\t\t\t\t\t\treturn async.nextTick(done);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself._deeperObject(i);\n\t\t\t\t\t\tself._asyncValidate(properties[i], candidate[i], function (err) {\n\t\t\t\t\t\t\tself._back();\n\t\t\t\t\t\t\tdone(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}, next);\n\t\t\t\t}\n\t\t\t], callback);\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.eq\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>eq (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.eq)\n- description and source-code\n```javascript\neq = function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'number' && typeof candidate !== 'string' && typeof candidate !== 'boolean') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar limit = schema.eq;\n\t\t\tif (typeof limit !== 'number' && typeof limit !== 'string' && typeof limit !== 'boolean' && !_typeIs.array(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (_typeIs.array(limit)) {\n\t\t\t\tfor (var i = 0; i < limit.length; i++) {\n\t\t\t\t\tif (candidate === limit[i]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.report('must be equal to [' + limit.map(function (l) {\n\t\t\t\t\treturn '\"' + l + '\"';\n\t\t\t\t}).join(' or ') + '], but is equal to \"' + candidate + '\"', null, 'eq');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (candidate !== limit) {\n\t\t\t\t\tthis.report('must be equal to \"' + limit + '\", but is equal to \"' + candidate + '\"', null, 'eq');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.exactLength\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>exactLength (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.exactLength)\n- description and source-code\n```javascript\nexactLength = function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'string' && !_typeIs.array(candidate)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar exactLength = Number(schema.exactLength);\n\t\t\tif (isNaN(exactLength)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate.length !== exactLength) {\n\t\t\t\tthis.report('must have exactly ' + exactLength + ' elements, but it have ' + candidate.length, null, 'exactLength');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.exec\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>exec (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.exec)\n- description and source-code\n```javascript\nexec = function (schema, candidate, callback) {\n\t\t\tvar self = this;\n\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncExec(schema, candidate, callback);\n\t\t\t}\n\t\t\t(_typeIs.array(schema.exec) ? schema.exec : [schema.exec]).forEach(function (exec) {\n\t\t\t\tif (typeof exec === 'function') {\n\t\t\t\t\texec.call(self, schema, candidate);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.gt\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>gt (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.gt)\n- description and source-code\n```javascript\ngt = function (schema, candidate) {\n\t\t\tvar limit = Number(schema.gt);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate <= limit) {\n\t\t\t\tthis.report('must be greater than ' + limit + ', but is equal to \"' + candidate + '\"', null, 'gt');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.gte\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>gte (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.gte)\n- description and source-code\n```javascript\ngte = function (schema, candidate) {\n\t\t\tvar limit = Number(schema.gte);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate < limit) {\n\t\t\t\tthis.report('must be greater than or equal to ' + limit + ', but is equal to \"' + candidate + '\"', null, 'gte');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.items\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>items (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.items)\n- description and source-code\n```javascript\nitems = function (schema, candidate, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncItems(schema, candidate, callback);\n\t\t\t}\n\t\t\tif (!(schema.items instanceof Object) || !(candidate instanceof Object)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar items = schema.items;\n\t\t\tvar i, l;\n\t\t\t// If provided schema is an array\n\t\t\t// then call validate for each case\n\t\t\t// else it is an Object\n\t\t\t// then call validate for each key\n\t\t\tif (_typeIs.array(items) && _typeIs.array(candidate)) {\n\t\t\t\tfor (i = 0, l = items.length; i < l; i++) {\n\t\t\t\t\tthis._deeperArray(i);\n\t\t\t\t\tthis._validate(items[i], candidate[i]);\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (var key in candidate) {\n\t\t\t\t\tif (candidate.hasOwnProperty(key)){\n\t\t\t\t\t\tthis._deeperArray(key);\n\t\t\t\t\t\tthis._validate(items, candidate[key]);\n\t\t\t\t\t\tthis._back();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.lt\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>lt (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.lt)\n- description and source-code\n```javascript\nlt = function (schema, candidate) {\n\t\t\tvar limit = Number(schema.lt);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate >= limit) {\n\t\t\t\tthis.report('must be less than ' + limit + ', but is equal to \"' + candidate + '\"', null, 'lt');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.lte\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>lte (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.lte)\n- description and source-code\n```javascript\nlte = function (schema, candidate) {\n\t\t\tvar limit = Number(schema.lte);\n\t\t\tif (typeof candidate !== 'number' || isNaN(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate > limit) {\n\t\t\t\tthis.report('must be less than or equal to ' + limit + ', but is equal to \"' + candidate + '\"', null, 'lte');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.maxLength\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>maxLength (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.maxLength)\n- description and source-code\n```javascript\nmaxLength = function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'string' && !_typeIs.array(candidate)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar maxLength = Number(schema.maxLength);\n\t\t\tif (isNaN(maxLength)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate.length > maxLength) {\n\t\t\t\tthis.report('must be shorter than ' + maxLength + ' elements, but it has ' + candidate.length, null, 'maxLength');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.minLength\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>minLength (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.minLength)\n- description and source-code\n```javascript\nminLength = function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'string' && !_typeIs.array(candidate)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar minLength = Number(schema.minLength);\n\t\t\tif (isNaN(minLength)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (candidate.length < minLength) {\n\t\t\t\tthis.report('must be longer than ' + minLength + ' elements, but it has ' + candidate.length, null, 'minLength');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.ne\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>ne (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.ne)\n- description and source-code\n```javascript\nne = function (schema, candidate) {\n\t\t\tif (typeof candidate !== 'number' && typeof candidate !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar limit = schema.ne;\n\t\t\tif (typeof limit !== 'number' && typeof limit !== 'string' && !_typeIs.array(limit)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (_typeIs.array(limit)) {\n\t\t\t\tfor (var i = 0; i < limit.length; i++) {\n\t\t\t\t\tif (candidate === limit[i]) {\n\t\t\t\t\t\tthis.report('must not be equal to \"' + limit[i] + '\"', null, 'ne');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (candidate === limit) {\n\t\t\t\t\tthis.report('must not be equal to \"' + limit + '\"', null, 'ne');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.optional\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>optional (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.optional)\n- description and source-code\n```javascript\noptional = function (schema, candidate) {\n\t\t\tvar opt = typeof schema.optional === 'boolean' ? schema.optional : (schema.optional === 'true'); // Default is false\n\n\t\t\tif (opt === true) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (typeof candidate === 'undefined') {\n\t\t\t\tthis.report('is missing and not optional', null, 'optional');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.pattern\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>pattern (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.pattern)\n- description and source-code\n```javascript\npattern = function (schema, candidate) {\n\t\t\tvar self = this;\n\t\t\tvar regexs = schema.pattern;\n\t\t\tif (typeof candidate !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar matches = false;\n\t\t\tif (!_typeIs.array(regexs)) {\n\t\t\t\tregexs = [regexs];\n\t\t\t}\n\t\t\tregexs.forEach(function (regex) {\n\t\t\t\tif (typeof regex === 'string' && regex in _formats) {\n\t\t\t\t\tregex = _formats[regex];\n\t\t\t\t}\n\t\t\t\tif (regex instanceof RegExp) {\n\t\t\t\t\tif (regex.test(candidate)) {\n\t\t\t\t\t\tmatches = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!matches) {\n\t\t\t\tself.report('must match [' + regexs.join(' or ') + '], but is equal to \"' + candidate + '\"', null, 'pattern');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.properties\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>properties (schema, candidate, callback)](#apidoc.element.schema-inspector.Validation.prototype.properties)\n- description and source-code\n```javascript\nproperties = function (schema, candidate, callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\treturn this.asyncProperties(schema, candidate, callback);\n\t\t\t}\n\t\t\tif (!(schema.properties instanceof Object) || !(candidate instanceof Object)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar properties = schema.properties,\n\t\t\t\t\ti;\n\t\t\tif (properties['*'] != null) {\n\t\t\t\tfor (i in candidate) {\n\t\t\t\t\tif (i in properties) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._deeperObject(i);\n\t\t\t\t\tthis._validate(properties['*'], candidate[i]);\n\t\t\t\t\tthis._back();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i in properties) {\n\t\t\t\tif (i === '*') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._deeperObject(i);\n\t\t\t\tthis._validate(properties[i], candidate[i]);\n\t\t\t\tthis._back();\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.someKeys\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>someKeys (schema, candidat)](#apidoc.element.schema-inspector.Validation.prototype.someKeys)\n- description and source-code\n```javascript\nsomeKeys = function (schema, candidat) {\n\t\t\tvar _keys = schema.someKeys;\n\t\t\tif (!_typeIs.object(candidat)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar valid = _keys.some(function (action) {\n\t\t\t\treturn (action in candidat);\n\t\t\t});\n\t\t\tif (!valid) {\n\t\t\t\tthis.report('must have at least key ' + _keys.map(function (i) {\n\t\t\t\t\treturn '\"' + i + '\"';\n\t\t\t\t}).join(' or '), null, 'someKeys');\n\t\t\t}\n\t\t}\n```\n- example usage\n```shell\nn/a\n```\n\n#### <a name=\"apidoc.element.schema-inspector.Validation.prototype.strict\"></a>[function <span class=\"apidocSignatureSpan\">schema-inspector.Validation.prototype.</span>strict (schema, candidate)](#apidoc.element.schema-inspector.Validation.prototype.strict)\n- description and source-code\n```javascript\nstrict = function (schema, candidate) {\n\t\t\tif (typeof schema.strict === 'string') { schema.strict = (schema.strict === 'true'); }\n\t\t\tif (schema.strict !== true || !_typeIs.object(candidate) || !_typeIs.object(schema.properties)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar self = this;\n\t\t\tif (typeof schema.properties['*'] === 'undefined') {\n\t\t\t\tvar intruder = Object.keys(candidate).filter(function (key) {\n\t\t\t\t\treturn (typeof schema.properties[key] === 'undefined');\n\t\t\t\t});\n\t\t\t\tif (intruder.length > 0) {\n\t\t\t\t\tvar msg = 'should not contains ' + (intruder.length > 1 ? 'properties' : 'property') +\n\t\t\t\t\t\t' [' + intruder.map(function (i) { return '\"' + i + '\"'; }).join(', ') + ']';\n\t\t\t\t\tself.report(msg, null, 'strict');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n","created":"2017-04-07T11:37:27.144Z","modified":"2017-04-07T11:37:27.144Z","lastPublisher":{"name":"npmdoc","email":"npmdoc@kaizhu.org"},"owners":[{"name":"npmdoc","email":"npmdoc@kaizhu.org"}],"other":{"_attachments":{},"_from":".","_id":"npmdoc-schema-inspector","_nodeVersion":"6.10.2","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/npmdoc-schema-inspector-0.0.1.tgz_1491565045025_0.820904784835875"},"_npmUser":{"name":"npmdoc","email":"npmdoc@kaizhu.org"},"_npmVersion":"3.10.10","_rev":"1-f8aa247371d6ab583bf3c9e6aa1307d6","_shasum":"6282a8e8549d054a80df4daeede2bf2684e598c1","author":{"name":"kai zhu","email":"kaizhu256@gmail.com"},"bugs":{"url":"https://github.com/npmdoc/node-npmdoc-schema-inspector/issues"},"directories":{},"dist-tags":{"latest":"0.0.1"},"dist":{"shasum":"6282a8e8549d054a80df4daeede2bf2684e598c1","tarball":"https://registry.npmjs.org/npmdoc-schema-inspector/-/npmdoc-schema-inspector-0.0.1.tgz"},"maintainers":[{"name":"npmdoc","email":"npmdoc@kaizhu.org"}],"readmeFilename":"README.md","time":{"modified":"2017-04-07T11:37:27.144Z","created":"2017-04-07T11:37:27.144Z","0.0.1":"2017-04-07T11:37:27.144Z"}}}