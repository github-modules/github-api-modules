{"name":"braque","version":"2.1.0","description":"Abstracter for external APIs. (Github, Heroku etc). Provides a simple wrapper for external APIs. Still beta.","repository":"https://github.com/d1b1/node-braque","licenses":[{"type":"The MIT License","url":"http://www.opensource.org/licenses/mit-license.php"}],"scripts":{"test":"vows --spec"},"main":".","dependencies":{"underscore":"~1.4.4","cryptojs":"~2.5.3","form-data":"~0.1.0","coding":"git://github.com/d1b1/node-json-coding.git#master"},"devDependencies":{"mocha":"~1.9.0"},"homepage":"https://github.com/d1b1/node-braque","versions":[{"number":"0.0.2","date":"2013-04-25T15:01:57.308Z"},{"number":"0.0.3","date":"2013-04-30T18:19:31.492Z"},{"number":"1.0.1","date":"2013-06-06T20:56:56.963Z"},{"number":"1.0.2","date":"2013-07-18T14:17:34.518Z"},{"number":"1.0.3","date":"2013-07-18T15:14:29.144Z"},{"number":"1.0.4","date":"2013-07-19T17:30:17.875Z"},{"number":"1.1.0","date":"2013-08-12T01:48:29.869Z"},{"number":"1.1.1","date":"2013-08-12T01:53:58.101Z"},{"number":"1.1.2","date":"2013-11-21T21:20:31.606Z"},{"number":"1.1.3","date":"2013-11-21T21:28:53.650Z"},{"number":"1.1.4","date":"2013-12-19T01:28:57.235Z"},{"number":"1.1.5","date":"2013-12-19T11:19:29.314Z"},{"number":"1.1.6","date":"2013-12-25T14:51:38.486Z"},{"number":"2.0.0","date":"2013-12-27T13:32:26.428Z"},{"number":"2.1.0","date":"2014-05-30T20:28:51.063Z"}],"readme":"Braque\n===========\n\nNode.js API abstracter. Provides a simple way to implement and consume any API; github, twitter, etc. This\nproject grow out of the patterns in the ajaxorg/node-github project. This projects lets a developer implement\nall or parts of other APIs without the need for more API specific packages.\n\nGoals:\n* Fewer API specific NPM dependencies.\n* Standardized HTTP/HTTPS best practices for external APIs.\n* Easier to share API version with consumers.\n* Smaller codebases on Heroku.\n\n### Available APIs\nThe following is a list of APIs available in in the APIS folder.\n\n* Github v 3.0 API\n* Twitter v 1.1 API\n\nIf you have an API file to add feel free to email or make a pull request.\n\n### Install\nTo install this package use the following\n\n```\n  npm install braque\n\n  or \n\n  npm install git@github.com:d1b1/node-braque.git#master\n```\n\n### Implementation of Github\nThe following is an example of how to implement the github API using the sample route file.\n\nSimple version using no Authentication.\n\n```\n  var Braque = require('braque');\n\n  var github = new Braque({\n    version: '3.0.0',\n    routeFile: './apis/github-v3.0.0.json',\n  });\n\n  // Auth Object is object that will be passed to the \n  // authentication function. When working with express\n  // and passport, used req.user. Your auth function can\n  // then sign or alter the header to comply with the\n  // designer endpoint authentication strategy.\n\n  github.repos.get( { user: 'd1b1', 'node-braque' }, req.user, function(err, repo) {\n    if (err) return console.log(err);\n\n    console.log(repo);\n  });\n\n```\n\nWith Username and Password Authentcation.\n\n```\n  var Braque = require('braque');\n\n  var github = new Braque({\n    version: '3.0.0',\n    routeFile: './apis/github-v3.0.0.json',\n  });\n\n  github.authenticate({\n    type: \"basic\",\n    username: 'XXXXXXXXXX',\n    password: 'XXXXXXXXXX'\n  });\n\n  github.repos.get( { user: 'd1b1', 'node-braque' }, function(err, repo) {\n    if (err) return console.log(err);\n    \n    console.log(repo);\n  });\n\n```\n\nCustom Authentication Callback - When an API needs to specific signing or\nheader values, this is the approach to use. Set the \n\n```\n  var Braque = require('braque');\n\n  var github = new Braque({\n    version: '3.0.0',\n    routeFile: './apis/github-v3.0.0.json',\n    encode: true // Defauts to false. Escapes all body data. Requires reverse other end.\n  });\n\n  github.authenticate({\n    type: \"custom\",\n\n    /*\n       This function runs after the request is build, but\n       before it is transmitted. This provides for a late\n       change to the header. \n\n       @Arguments:\n\n        - api (Object) Self reference to generated API.\n        - method (String) REST METHOD (get, post, put, delete etc)\n        - url (String) Request URL\n        - extras (String/Object): API call specific data that may be needed \n          in the auth callback. For example: User Profile \n          and/or Token Information.\n\n        @return (String)\n\n        @TODO This function needs to be rebuild\n        to pass in the header and full request and\n        all the function to change anything, data, url\n        or header values. Currently only returns a value\n        for Header.Authentication. \n    */\n\n    custom: function(api, method, url, extras) {\n      // Your Signing code.\n\n      return 'aValue'\n    }\n  });\n\n  github.repos.get( { user: 'd1b1', 'node-braque' }, req.user, function(err, repo) {\n    if (err) return console.log(err);\n    \n    console.log(repo);\n  });\n\n```\n\n### Request Callbacks\nCallbacks in the API call process are for custom changes needed for specific APIs.\n\nThe following is an example of a header callback that will run after the request\nheaders have been setup. It will allow the API implimentation to define a value \nneeded by the Heroku API. This might need to get moved to the API route file.\n\n```\n  var heroku = new Braque({\n    version: \"2.0.0\",\n    routeFile: \"./heroku/heroku.json\",\n\n    // Use callbacks to provide access to the request before it is send.\n    callbacks: {\n      header: function(headers) {\n        headers.Accept= \"application/vnd.heroku+json; version=3\";\n      }\n    }\n  });\n```\n\n### Error\nBraque assumes either a string or an stringified error message. The error object contains a parsed version of the \nresponse when an error code is received. This provides the ability to send and manage json validation or error message. \nThis is designed to keep the API callback dry and easy to read. \n\n\n```\n  myAPI.user.get({ id: 1111}, auth, function(err, User) {\n     if (err) \n       console.log(err.data)\n\n     // err data  = JSON object. \n\n     console.log(User)\n  })\n\n```\n\n### Coming Soon\n\n1. Adding the twitter routes file.\n2. Adding the google geocoder routes file.\n3. Abstracting the Auth pattern to allow for custom Auth Handlers.\n4. Tests\n5. Code assists. Looking for a way to generate local docs files to speed up development.\n6. Review the way the code handles APIs that expect query values. \n7. Swagger Route file generator.\n8. Add docs for the 'file' parameter type. \n9. Add better output for params.\n10. Fix the GET method to allow the auto addition of URL query values when the path includes existing query values. Makes it easier to package GET calls.\n11. Adding the Formagg.io Cheese API route file.\n12. Add a sample site to outline documentation and usage and promote the abstraction and the artist.\n\n### Route file format\nThe route file provides the glue for any API abstraction. It tells braque about the endpoint infomation, protocal\nvalidation requirements and finally the routes. The code attempts to make separate the API endpoint groups into \nlocal groups. It will camelCase all function calls.\n\nFor example 'pull-requests/get-all' becomes github.pullRequest.getAll();\n\n### Attribution\nThis project grew out of the work on several other projects; node-ci and its implementations of the node-github project and \nthe formagg.io API. I needed the ability to implement our API in client consumer applications. We needed to have a consistent \nauthentication pattern, error handling and documentation. The node.js github API project provided the pattern. It provides\na node developer with a simple pattern to use when there is a need to integrate github into an larger feature set. The node-ci\nserver needed the ability to interact with specific portions of the github api. Once I started work on the formagg.io the github\npattern was a logic place to start.\n\nThanks [ajaxorg]https://github.com/ajaxorg\n\n[![NPM](https://nodei.co/npm/braque.png?stars&downloads)](https://nodei.co/npm/braque/) [![NPM](https://nodei.co/npm-dl/braque.png)](https://nodei.co/npm/braque/)\n\n\n\n","created":"2013-04-25T15:01:55.401Z","modified":"2014-05-30T20:28:51.063Z","lastPublisher":{"name":"d1b1","email":"Stephan.Smith.BC93@gmail.com"},"owners":[{"name":"d1b1","email":"Stephan.Smith.BC93@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"braque","_npmUser":{"name":"d1b1","email":"Stephan.Smith.BC93@gmail.com"},"_npmVersion":"1.4.3","_rev":"1-ab772734a8d79e39d33e087440cb2daa","author":{"name":"Stephan Smith","email":"Stephan.Smith.BC93@gmail.com"},"bugs":{"url":"https://github.com/d1b1/node-braque/issues"},"directories":{},"dist-tags":{"latest":"2.1.0"},"dist":{"shasum":"fdd3f1450aedae409a7a2480be68022952b92e5b","tarball":"http://registry.npmjs.org/braque/-/braque-2.1.0.tgz"},"maintainers":[{"name":"d1b1","email":"Stephan.Smith.BC93@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-05-30T20:28:51.063Z","created":"2013-04-25T15:01:55.401Z","0.0.2":"2013-04-25T15:01:57.308Z","0.0.3":"2013-04-30T18:19:31.492Z","1.0.1":"2013-06-06T20:56:56.963Z","1.0.2":"2013-07-18T14:17:34.518Z","1.0.3":"2013-07-18T15:14:29.144Z","1.0.4":"2013-07-19T17:30:17.875Z","1.1.0":"2013-08-12T01:48:29.869Z","1.1.1":"2013-08-12T01:53:58.101Z","1.1.2":"2013-11-21T21:20:31.606Z","1.1.3":"2013-11-21T21:28:53.650Z","1.1.4":"2013-12-19T01:28:57.235Z","1.1.5":"2013-12-19T11:19:29.314Z","1.1.6":"2013-12-25T14:51:38.486Z","2.0.0":"2013-12-27T13:32:26.428Z","2.1.0":"2014-05-30T20:28:51.063Z"}}}