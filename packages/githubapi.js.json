{"name":"githubapi.js","version":"0.9.1","description":"wrapper on top of github api v3","main":"build/githubAPI.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":"https://github.com/jeromeetienne/githubAPI.js","keywords":["github","api","node.js","browser","authentication","express","passportjs"],"license":"MIT","homepage":"https://github.com/jeromeetienne/githubAPI.js","gitHead":"4bf34c6d162dae326f1b53963aca02ff7c1a4134","versions":[{"number":"0.9.0","date":"2015-01-24T05:10:37.267Z"},{"number":"0.9.1","date":"2015-01-27T23:01:02.301Z"}],"readme":"githubApi.js\n------------\n\n[githubapi.js](https://github.com/jeromeetienne/githubAPI.js) allow to\naccess [github api](https://developer.github.com/v3/) in javascript.\nIt can be used from node.js or browser.\nThe library code is available at [/build/githubAPI.js](https://raw.githubusercontent.com/jeromeetienne/githubAPI.js/master/build/githubAPI.js)\nThere is a [fully documented API](https://github.com/jeromeetienne/githubAPI.js/blob/master/docs/api.md)\nalso available at the end of this README.md.\n\n## Install it\n\nTo install for node.js, just do\n\n```\nnpm install githubapi.js\n```\n\nTo install for browser, just do\n\n```\nbower install githubapi.js\n```\n\nor just include ```build/githubAPI.js``` in your projects the way you see fit :)\n\n\n## Show, Don't Tell\n\nLet's see how to use githubapi.js. There are examples for you to look at and see how to use it.\nThe examples shows usage from the browser and from node.js. You can \nfind them in [/examples/express/public](https://github.com/jeromeetienne/githubAPI.js/blob/master/examples/express/public).\n\n- [using github authentication](https://github.com/jeromeetienne/githubAPI.js/blob/master/examples/express/public/example-upload-from-browser.html)\nIt shows how to login/logout with the github authentication.\nA logged in user will give profile information and access_token.\nThe access_token is given to github to authenticate  the user.\nIt can be used from the browser or from node.js.\n- [use github api thru a rest](https://github.com/jeromeetienne/githubAPI.js/blob/master/examples/express/public/example-githubapi-rest.html)\nThere is example express routes called\n[githubapi-rest-examples](https://github.com/jeromeetienne/githubAPI.js/blob/master/examples/express/public/example-upload-from-browser.html). it provides a example of REST API on top of githubapi.js.\nThis is a good place to see how to use githubapi.js from node.js.\n- [upload from browser](https://github.com/jeromeetienne/githubAPI.js/blob/master/examples/express/public/example-github-auth-standalone.html)\nIt upload files from the browser directly to gihub.\nIt is possible to upload from node.ns too, but uploading from the user's browser, save\nbandwidth on servers.\nIt is a good place to see how to use githubapi.js from browser.\n- [index.html](https://github.com/jeromeetienne/githubAPI.js/blob/master/examples/public/index.html)\nIt is just the examples homepage.\nonce you launch the server, goto\n[http://127.0.0.1:8000/](http://127.0.0.1:8000/)\nto see it.\n- [app.js](https://github.com/jeromeetienne/githubAPI.js/blob/master/examples/express/app.js) is the usual\napplication for express server. It is a good place to see how to initialize the github authentication \nin your own server.\n\nNow, let's run the server. A server is required because github api requires authentications for many calls.\nAn authentication server is provided as examples in ```/examples/express```, \ncoded with [express](http://expressjs.com/) as you may have guessed. \nIt run the authentication server and serve ```/examples/express/public``` as static.\n\nFirst you need to authenticate yourself on github.\nIt will give permissions to example application.\n\n### Getting application's keys from github\n\nYou need to create register your application on github.\nAt the moment, it is in user -> setting -> applications -> register new application.\n[link](https://github.com/settings/applications)\n\n![screen shot 2015-01-27 at 12 41 55](https://cloud.githubusercontent.com/assets/252962/5917837/f5c35e08-a621-11e4-9ee8-d590fa0d7d5f.png)\n\nGet the clientID and clientSecret you see on top.\n\nThen setup those value into your examples server. First, copy ```examples/expess/app_github_keys.sample.js``` into ```examples/expess/app_github_keys.js```\nThen replace the values by your own clientID/clientSecret.\nAnd you are done.\n\n## How to run the example\n\nOnce you got the keys setup, launch the server this way and go to \n[http://127.0.0.1:8000/](http://127.0.0.1:8000/) with your browser\n\n```\ncd examples/express\nmake server\n```\n\n## Makefile\n\n- ```make build``` - build the library\n- ```make minify``` - build the library and minify it\n- ```make server``` - launch dev server\n- ```make jsdoc``` - generate docs/api.md from [jsdoc](http://usejsdoc.org) in ```/src```\n\n# Motivation\nThis library is working well in my experience,\nThey are other wrapper for github api, i dont claim mine is better :)\nThe other libraries seemed good when i looked. be sure to check them out.\n\nI had to implement my own github api wrapper.\nIt was a core part of a project. \nSo i had to really understand it, i could not rely\non a 3rd party library. This is why i reimplemented it.\n\n# TODO - Possible Improvements\n* Use conditional requests for github api calls and thus reduce rate limits\n  * see [doc on conditional requests](https://developer.github.com/guides/getting-started/#conditional-requests)\n  * see [doc on rate limits](https://developer.github.com/v3/rate_limit/)\n* githubapi.js doesn't implement all [github api v3 calls](https://developer.github.com/v3), far from it.\n  - But it does implement the call i need now.\n  - Maybe implement the whole API later.\n\n## Folders\n- ```/build``` - the built source, the one you need as a user of the library\n- ```/src``` - the source of the library itself, where you go to develop this api\n- ```/examples``` - the examples you can run to learn how to use this library\n  - ```/examples/express``` - the express server needed to run the examples\n \n# API \n\nHere is the api documentation. \nIt is complete and automatically generated from jsdoc to be sure to stay in sync.\nIt has been pasted from the [original](https://github.com/jeromeetienne/githubAPI.js/blob/master/docs/api.md).\n\n<!-- Copy/pasted from autogenerated version - dont modify below -->\n \n<a name=\"Github\"></a>\n#class: Github\n**Members**\n\n* [class: Github](#Github)\n  * [new Github(accessToken, profile)](#new_Github)\n  * [Github.userBlackList](#Github.userBlackList)\n  * [Github.Flow()](#Github.Flow)\n  * [github.getRepos(onLoad)](#Github#getRepos)\n  * [github.createRepo()](#Github#createRepo)\n  * [github.deleteRepo()](#Github#deleteRepo)\n  * [github.createOrUpdateFile()](#Github#createOrUpdateFile)\n  * [github.filesList(repoName, rootPath, onLoad)](#Github#filesList)\n  * [github.get(path, onLoad)](#Github#get)\n  * [github.post(path, onLoad)](#Github#post)\n  * [github.put(path, onLoad)](#Github#put)\n  * [github.delete(path, onLoad)](#Github#delete)\n  * [github._requestRead(method, path, onLoad)](#Github#_requestRead)\n  * [github._requestWrite(method, path, dataToPost, onLoad)](#Github#_requestWrite)\n  * [github.getContent(repoName, path, onLoad)](#Github#getContent)\n  * [github.getContent(repoName, path, onLoad)](#Github#getContent)\n  * [github.getReadme(repoName, onLoad)](#Github#getReadme)\n  * [github.createFile(repoName, path, message, content, onLoad)](#Github#createFile)\n  * [github.updateFile()](#Github#updateFile)\n  * [github.deleteFile()](#Github#deleteFile)\n  * [github.createFork()](#Github#createFork)\n  * [github.checkUserBlacklist(userName)](#Github#checkUserBlacklist)\n\n<a name=\"new_Github\"></a>\n##new Github(accessToken, profile)\nBuild the tool itself\n\n**Params**\n\n- accessToken `String` - the access token you got from authentication  \n- profile `Object` - the profile of your user from github  \n\n<a name=\"Github.userBlackList\"></a>\n##Github.userBlackList\nuser blacklist\n\n**Type**: `Array.<String>`  \n<a name=\"Github.Flow\"></a>\n##Github.Flow()\nBuild a flow to handle asynchronous data flow\ngowiththeflow.js - https://github.com/jeromeetienne/gowiththeflow.js\n\n<a name=\"Github#getRepos\"></a>\n##github.getRepos(onLoad)\nget all repositories\n\n**Params**\n\n- onLoad `function` - callback called on load  \n\n<a name=\"Github#createRepo\"></a>\n##github.createRepo()\nhttps://developer.github.com/v3/repos/#create\n\n<a name=\"Github#deleteRepo\"></a>\n##github.deleteRepo()\nhttps://developer.github.com/v3/repos/#delete-a-repository\n\n- require scope 'delete_repo'\n\n<a name=\"Github#createOrUpdateFile\"></a>\n##github.createOrUpdateFile()\nhttps://developer.github.com/v3/repos/contents/#update-a-file\n\n<a name=\"Github#filesList\"></a>\n##github.filesList(repoName, rootPath, onLoad)\nget a list of all the file at rootPath\n\n**Params**\n\n- repoName `String` - the name of the repository  \n- rootPath `String` - the root path where to start, likely '' for the whole thing  \n- onLoad `function` - callback called once data are loaded  \n\n<a name=\"Github#get\"></a>\n##github.get(path, onLoad)\nget data\n\n**Params**\n\n- path `String` - the api path  \n- onLoad `function` - callback called when the result is loaded  \n\n<a name=\"Github#post\"></a>\n##github.post(path, onLoad)\npost data\n\n**Params**\n\n- path `String` - the api path  \n- onLoad `function` - callback called when the result is loaded  \n\n<a name=\"Github#put\"></a>\n##github.put(path, onLoad)\nput data\n\n**Params**\n\n- path `String` - the api path  \n- onLoad `function` - callback called when the result is loaded  \n\n<a name=\"Github#delete\"></a>\n##github.delete(path, onLoad)\ndelete data\n\n**Params**\n\n- path `String` - the api path  \n- onLoad `function` - callback called when the result is loaded  \n\n<a name=\"Github#_requestRead\"></a>\n##github._requestRead(method, path, onLoad)\nPerform a READ on github API\n\n**Params**\n\n- method `String` - \"POST\" \"PUT\" \"DELETE\" this kindof thing  \n- path `String` - the api path  \n- onLoad `function` - callback called when the result is loaded  \n\n<a name=\"Github#_requestWrite\"></a>\n##github._requestWrite(method, path, dataToPost, onLoad)\nPerform a WRITE on github API\n\n**Params**\n\n- method `String` - \"POST\" \"PUT\" \"DELETE\" this kindof thing  \n- path `String` - the api path  \n- dataToPost `Object` | `String` - the data to send along  \n- onLoad `function` - callback notified when the result is loaded  \n\n<a name=\"Github#getContent\"></a>\n##github.getContent(repoName, path, onLoad)\nget contents - https://developer.github.com/v3/repos/contents/#get-contents\n\n**Params**\n\n- repoName `String` - the repository name  \n- path `String` - the path to the content  \n- onLoad `function` - callback called on load  \n\n<a name=\"Github#getContent\"></a>\n##github.getContent(repoName, path, onLoad)\nget contents - https://developer.github.com/v3/repos/contents/#get-contents\n\n**Params**\n\n- repoName `String` - the repository name  \n- path `String` - the path to the content  \n- onLoad `function` - callback called on load  \n\n<a name=\"Github#getReadme\"></a>\n##github.getReadme(repoName, onLoad)\nget README - https://developer.github.com/v3/repos/contents/#get-the-readme\n\n**Params**\n\n- repoName `String` - the repository name  \n- onLoad `function` - callback called on load  \n\n<a name=\"Github#createFile\"></a>\n##github.createFile(repoName, path, message, content, onLoad)\nhttps://developer.github.com/v3/repos/contents/#create-a-file\n\n**Params**\n\n- repoName `type` - [description]  \n- path `type` - [description]  \n- message `type` - [description]  \n- content `type` - [description]  \n- onLoad `type` - [description]  \n\n**Returns**: `type` - [description]  \n<a name=\"Github#updateFile\"></a>\n##github.updateFile()\nhttps://developer.github.com/v3/repos/contents/#update-a-file\n\n<a name=\"Github#deleteFile\"></a>\n##github.deleteFile()\nhttps://developer.github.com/v3/repos/contents/#delete-a-file\n\n<a name=\"Github#createFork\"></a>\n##github.createFork()\nhttps://developer.github.com/v3/repos/forks/#create-a-fork\n\n<a name=\"Github#checkUserBlacklist\"></a>\n##github.checkUserBlacklist(userName)\ntest if the username is in the user blacklist\n\n**Params**\n\n- userName `String` - the username  \n","created":"2015-01-24T05:10:37.267Z","modified":"2015-01-27T23:01:02.301Z","lastPublisher":{"name":"jetienne","email":"jerome.etienne@gmail.com"},"owners":[{"name":"jetienne","email":"jerome.etienne@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"githubapi.js","_nodeVersion":"0.10.33","_npmUser":{"name":"jetienne","email":"jerome.etienne@gmail.com"},"_npmVersion":"2.1.9","_rev":"1-bdd1f1f404465a9a2728205a6eabd620","_shasum":"05c7be7aaafeb4d9a86489686b4a19213043efa3","author":{"name":"Jerome Etienne http://twitter.com/jerome_etienne"},"bugs":{"url":"https://github.com/jeromeetienne/githubAPI.js/issues"},"directories":{"example":"examples"},"dist-tags":{"latest":"0.9.1"},"dist":{"shasum":"05c7be7aaafeb4d9a86489686b4a19213043efa3","tarball":"http://registry.npmjs.org/githubapi.js/-/githubapi.js-0.9.1.tgz"},"maintainers":[{"name":"jetienne","email":"jerome.etienne@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2015-01-27T23:01:02.301Z","created":"2015-01-24T05:10:37.267Z","0.9.0":"2015-01-24T05:10:37.267Z","0.9.1":"2015-01-27T23:01:02.301Z"}}}