{"name":"deployment","version":"0.2.3","description":"Continuous deployment for the masses. Download the latest version of your GitHub package, run tests and deploy to the specified directory. Run a deployment server to launch deployments from the internet, and integrate with GitHub easily. Includes an API t","homepage":"https://github.com/alexfernandez/deployment","license":"MIT","main":"index.js","repository":"https://github.com/alexfernandez/deployment","dependencies":{"prototypes":"*","async":"*","testing":"*","emailjs":"~0.3.16","optimist":"~0.6.0","log":"*"},"keywords":["deployment","npm","continuous deployment","deploy","test","continuous delivery","deployment server"],"engines":{"node":"*"},"bin":{"deployment-server":"bin/server.js","deployment-run":"bin/deployment.js"},"scripts":{"test":"node test.js"},"private":false,"gitHead":"11c38ebdd2095454c4e7e881a879926e7c0fd455","versions":[{"number":"0.0.1","date":"2013-09-11T23:30:35.436Z"},{"number":"0.0.2","date":"2013-09-11T23:45:06.696Z"},{"number":"0.0.3","date":"2013-09-15T21:34:26.290Z"},{"number":"0.0.4","date":"2013-09-15T23:31:34.974Z"},{"number":"0.0.5","date":"2013-09-18T22:28:31.194Z"},{"number":"0.0.6","date":"2013-09-18T22:45:14.791Z"},{"number":"0.0.7","date":"2013-09-19T01:09:54.170Z"},{"number":"0.0.8","date":"2013-09-19T01:17:47.605Z"},{"number":"0.0.9","date":"2013-09-28T10:59:44.651Z"},{"number":"0.1.1","date":"2013-09-30T23:40:31.961Z"},{"number":"0.1.2","date":"2013-10-04T22:19:36.965Z"},{"number":"0.1.3","date":"2013-10-07T16:54:09.253Z"},{"number":"0.1.4","date":"2013-10-12T23:49:52.249Z"},{"number":"0.1.6","date":"2013-10-29T22:50:12.274Z"},{"number":"0.1.7","date":"2013-12-12T01:02:28.193Z"},{"number":"0.1.8","date":"2013-12-15T01:12:00.521Z"},{"number":"0.1.9","date":"2014-01-15T14:35:20.345Z"},{"number":"0.2.0","date":"2015-09-22T17:27:54.475Z"},{"number":"0.2.1","date":"2015-09-22T17:31:08.047Z"},{"number":"0.2.2","date":"2016-01-22T17:24:11.672Z"},{"number":"0.2.3","date":"2016-03-17T17:05:26.962Z"}],"readme":"[![Build Status](https://secure.travis-ci.org/alexfernandez/deployment.png)](http://travis-ci.org/alexfernandez/deployment)\n\n[![Package quality](http://packagequality.com/badge/deployment.png)](http://packagequality.com/#?package=deployment)\n\n# deployment\n\nContinuous Deployment for the masses.\n\nDownload the latest version of your git package, run all tests and deploy to the specified directory.\nRun a deployment server to launch deployments from the internet, and integrate with GitHub easily.\nSend email notifications for every deployment, successful or failed.\n\nIncludes an API to fire deployments from an external source.\n\n## Installation\n\nInstall from npm:\n\n    $ npm install deployment\n\nOr add to your package.json as a dependency. For easier access to commands,\ninstall the package globally:\n\n    $ npm install -g deployment\n\nFor manual installation, download from GitHub:\n\n    $ git clone https://github.com/alexfernandez/deployment\n\nInstall node modules:\n\n    $ cd deployment\n    $ npm install\n\nAnd you are done!\n\n## Usage\n\nThere are three basic ways to start a deployment.\n\n### Command Line\n\nTo start a deployment from the command line:\n\n    $ node bin/deployment.js\n\nIf you installed the package globally you can just use the command `deployment-run`:\n\n    $ deployment-run\n\nWill launch a deployment, using the current directory as deployment directory.\nIf no test directory is given, the deployment will just download the latest code\nand put it in production.\n\nWhen a test directory is given:\n\n    $ node bin/deployment --testdir \"../test/package/\"\n\nthen package tests will be run first, and only if they succeed will the deployment\nproceed. A deployment directory can also be given:\n\n    $ node bin/deployment --dir \"package/\"\n\n#### Options\n\nCommand line options are:\n\n* --quiet: do not show log messages.\n\n* --dir [path]: deploy to the given directory, defaults to the current directory.\n  This directory must already have a copy of the git repository being deployed.\n\n* --testdir [path]: use the given directory as test environment, no default.\n  This directory must already have a copy of the git repository being deployed.\n\n* --name [name]: package name to show in messages, default `unnamed`.\n\n* --noinst: do not run `npm install` when installing.\n\n* --exec [command]: run the given command after deployment, to restart the\n  service.\n\n* --timeout [seconds]: max time to wait for commands including tests,\n  default 60 seconds.\n\n* --detail: show full detail (log and diff) of code to be deployed.\n\n### Web Server\n\nYou can start a web server that will listen to deployment requests,\nby default on port 3470:\n\n    $ node bin/server.js --dir .\n\nAgain, if you installed the package globally you can just use the command\n`deployment-server`:\n\n    $ deployment-server --dir .\n\nAt the very least a deployment directory must be given with `--dir`.\nA token can also be specified:\n\n    $ node bin/server.js --dir . --token wydjzfoytrg4grmy\n\nOtherwise a random token will be automatically generated.\nAny requests coming in with the special, magic token will result in a deployment.\nFrom localhost use this URL:\n\n    http://localhost:3470/deploy/wydjzfoytrg4grmy\n\nYou should see an OK message, or \"Bad request\" if an incorrect URL is sent.\n\n#### Options\n\nOptions are the same as for deployment, with a little change and a few additions:\n\n* --dir [path]: deploy to the given directory, _no defaults_.\n  This directory must already have a copy of the git repository being deployed.\n\nIn the case of the server a deployment directory needs to be explicitly given,\nor no production deployment will be done. A test deployment may still be done.\nThis will be explained later, in the section about distributed deployments.\nIf no test directory and no deployment directory are given,\nthe server will complain at startup.\n\n* --token [token]: use the given token to secure the access URL.\n\nIf no token is passed then a random token will be generated and shown on startup.\n\nWhy use a random URL for deployments?\nIf you use a predictable URL any third parties might guess it\nand launch deployments on your server, which may not be what you want.\n\nThe following parameters are used to send email notifications.\n\n* --user [user]:     User for email server');\n* --password [pwd]:  Password for email server');\n* --host [host]:     Host for email server');\n* --ssl [boolean]:   \"true\" to enable SSL');\n* --from [email]:    Email address that generates the message');\n* --to [email]:      Destination for deployment message');\n\nThe deployment server can send emails each time a deployment is run.\nThese parameters contain the whole configuration to access an SMTP server.\nExample:\n\n    --from alexfernandeznpm@gmail.com --to alexfernandeznpm@gmail.com\n      --user alexfernandeznpm@gmail.com --password [REDACTED]\n      --host smtp.gmail.com --ssl true\n\nto send email using a Gmail account.\nThe recipient will get a mail with a complete log of the deployment,\nand the outcome in the subject.\n\n#### Manual Deployment\n\nA manual deployment can be started using the same URL as before,\nbut ending in 'manual':\n\n    http://localhost:3470/wydjzfoytrg4grmy/manual\n\nIn this case you will see the output of all deployment phases, and the result.\n\n#### Keeping It Running\n\nIdeally you should start your deployment server when your system starts up.\n\nUbuntu: in samples/upstart-deployment-server.conf you have a sample Upstart task to start\nyour deployment server running and keep it running. The relevant lines are quoted here:\n\n    cd $DEPLOYMENT_DIR\n    exec sudo -u ubuntu \"deployment-server --dir . --token ke8mqs3ahdhul3kr\n\nA constant token is used to have a predictable URL to access.\n\n### API\n\nYou can also start a deployment using the API:\n\n    var deployment = require('deployment');\n    var options = {};\n    deployment.deploy(options, function(error, result)\n    {\n      if (error)\n      {\n        log.error('Error: %s', error);\n        return;\n      }\n      log.info('Success: %s', result);\n    });\n\nThe following options are available:\n\n* directory: the directory where the package currently resides.\n* testDirectory: the directory where the test version of the package resides.\n* deploymentCommand: a command to run after a successful deployment.\n* quiet: suppress most log messages.\n* detail: show log and diff of code to deploy.\n\nAn optional callback `function(error, result)` is called after the deployment\nfinishes, either with an error or (if successful) with a result string.\n\n## Tutorials\n\nNow we will review three basic scenarios where the deployment package can help you:\nsimple deployment from GitHub, deployment with tests, and distributed deployments.\nWe will see a detailed, step-by-step tutorial for each scenario.\n\n### Tutorial: Simple Deployment\n\nYou have a single server where you just want to deploy your latest version after each push\nto a GitHub repository. You just need to start the deployment server in the directory where the\ndeployment is going to happen, say `/home/ubuntu/production`:\n\n    $ cd /home/ubuntu/production\n    $ deployment-server --dir . --token vurrbab8rj780faz\n\nYou need to supply a fixed token so that the resulting URL can be used as a GitHub webhook.\nYour endpoint will now be http://localhost:3470/deploy/vurrbab8rj780faz.\n\nThe deployment process will be as follows:\n* update code in deployment directory,\n* update node modules in deployment directory.\n\nAs console commands, the sequence would be:\n    $ git pull /home/ubuntu/production\n    $ npm install /home/ubuntu/production\n\n#### Generating a Token\n\nTo generate a random token just run the deployment server without one:\n\n    $ deployment-server --dir .\n    [...] INFO Creating random token: 21wlpjt6ay2liapp\n\nThis token should be sufficiently random. You can also just write at your Bash console:\n\n    $ echo \"$(head -c 16 /dev/random | base64 | tr '[A-Z]' '[a-z]' | sed 's/\\/\\+//g' | head -c 16)\"\n\nThere is a sample Bash command in samples/generate-token.sh, for your convenience.\n\n#### External Access\n\nYou can access your deployment server from within your local network,\nreplacing `localhost` with your local IP address, e.g.:\n\n    http://192.168.1.5:3470/deploy/wydjzfoytrg4grmy\n\nWhen your server can be reached from the internet you can its your domain name:\n\n    http://myserver.test.com:3470/deploy/wydjzfoytrg4grmy\n\nMake sure that the chosen port (3470 by default) is accessible from the outside.\nYou can also use nginx or a similar webserver to proxy connections from port 80\nto your chosen port. With nginx you would include something like this\nin your nginx.conf:\n\n    location /deploy {\n        proxy_read_timeout 200s;\n        proxy_connect_timeout 2s;\n        proxy_pass http://127.0.0.1:3470;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\nYou have this configuration in samples/nginx-redirection.conf\nSo you can now use the default HTTP port 80:\n\n    http://myserver.test.com/deploy/wydjzfoytrg4grmy\n\nThe resulting external URL can be added as a\n[webhook to GitHub](https://help.github.com/articles/post-receive-hooks)\nto run an automated deployment every time new code is pushed to the server.\nGitHub requests will always come from the ports shown in\n[this page](https://api.github.com/meta), so it is easy in nginx\nto stop requests that come from other IP addresses.\nJust add these lines to your nginx.conf:\n\n        deny all;\n        allow 192.168.1.0/24;\n        allow 204.232.175.64/27;\n        allow 192.30.252.0/22;\n\nBesides port redirection you can also listen on a subdomain,\nadd basic authentication, limit IP addresses and many more things.\nDeployments can be made as safe as desired.\n\n### Tutorial: Deployment with Tests\n\nNow you have grown up, but just a bit: still with a single server, you want to run all package tests\non a test repository before deploying your latest code.\nBoth test and production directories must be specified; as before the production repo lives at\n`/home/ubuntu/production`, and the new test repo at `/home/ubuntu/test`.\nEach directory must contain a full git repository with its proper configuration;\nsince we are using just a single machine\nfor tests and for production, we should ensure that any resources (e.g. databases)\nare adequately isolated.\n\nWe now start the server as follows:\n\n    $ cd /home/ubuntu/production\n    $ deployment-server --dir . --testdir /home/ubuntu/test --token vurrbab8rj780faz\n\nThe server will listen as before at http://localhost:3470/deploy/vurrbab8rj780faz.\n\n#### Process\n\nThe deployment process is a bit more convoluted than before:\n* update code in test directory,\n* update node modules in test directory,\n* run package tests in test directory,\n* update code in deployment directory,\n* update node modules in deployment directory.\n\nAs console commands, the sequence would be:\n    $ git pull /home/ubuntu/test\n    $ npm install /home/ubuntu/test\n    $ npm test /home/ubuntu/test\n    $ git pull /home/ubuntu/production\n    $ npm install /home/ubuntu/production\n\n### Service Restart\n\nYou will note that we have not mentioned any restart as part of the deployment process.\nBy default the deployment package does not deal with service restart, so how does the new code enter into service?\nThere are several alternatives.\n\nFirst, the deployment package can be configured to run a specified command, passing it an option `deploymentCommand` from the API.\nYou can restart an Upstart task, reboot an init.d service or run any other command you need.\n\nSecond, the service could be run using a package like `supervisor`,\nwhich will restart the service automatically right after downloading the new code.\n\nAnother option is to run your services in cluster mode, rebooting each worker after a specified time.\nThis last scheme does not mesh well with database schema updates, or any other irreversible changes.\n\n### Tutorial: Distributed Deployment\n\nOur last scenario is the most complex (and realistic) of the set:\none integration machine and a set of production servers.\nThis is a common setup to withstand high loads.\nFrom a deployment perspective it is also much more flexible than having tests\nrun on the production machine: separate databases and resources can be used,\nso it can also be used even with just one production machine.\n\nThis scenario is complex so please bear with us.\nFor simplicity, we assume one integration server with a git repo for tests,\nlocated at `/home/ubuntu/integration/`; and one production machine\nwith a production git repo at `/home/ubuntu/production`.\n\nLet us start with the production machine, accessible from the network as production.test.com.\nThis time we will use an Upstart task to start our production server,\nboringly called `production`: this starts up our web server or whatever.\nThe deployment server will be started with another Upstart task,\nequivalent to the following commands:\n\n    $ cd /home/ubuntu/production\n    $ deployment-server --dir . --token vurrbab8rj780faz \\\n      --exec \"sudo restart production\"\n\nNote that the deployment server restarts the production server.\nNote also that we do not specify a test directory, as there is none here!\nThe server will listen at http://production.test.com:3470/deploy/vurrbab8rj780faz,\nso we can trigger a deployment from the command line using this command:\n\n    $ wget http://production.test.com:3470/deploy/vurrbab8rj780faz\n\nHowever this time we will not be accessing this URL directly,\nbut from the integration machine integration.test.com.\nAnd here the daemon is started as follows:\n\n    $ cd /home/ubuntu/integration\n    $ deployment-server --testdir . --token vurrbab8rj780faz \\\n      --exec \"wget http://production.test.com:3470/deploy/vurrbab8rj780faz\"\n\nSo we use the same command as before to trigger a deployment on the production machine,\n_only if the tests on the integration server go well_.\n\nThis integration server will now be listening at\nhttp://integration.test.com:3470/deploy/vurrbab8rj780faz,\nwhich we can use as a GitHub webhook.\n\n#### Process\n\nThe deployment process is divided in two parts. On the integration server:\n* update code in test directory,\n* update node modules in test directory,\n* run package tests in test directory,\n* access production machine and start a deployment.\n\nOn the production server:\n* update code in deployment directory,\n* update node modules in deployment directory,\n* restart the production web server.\n\nAs console commands, the sequence would be:\n\n    integration.test.com $ git pull /home/ubuntu/test\n    integration.test.com $ npm install /home/ubuntu/test\n    integration.test.com $ npm test /home/ubuntu/test\n    integration.test.com $ wget http://production.test.com:3470/deploy/vurrbab8rj780faz\n\n    production.test.com $ git pull /home/ubuntu/production\n    production.test.com $ npm install /home/ubuntu/production\n    production.test.com $ sudo restart production\n\nThe process in one server starts the process on the second.\n\n#### Command distribution\n\nIt is usual to have multiple servers receiving requests,\nto distribute the load.\nHow can we reach them all from the integration server,\nso we can have a coordinated deployment?\n\nA blunt solution would be to change the `--exec` parameter to reach many different URLs:\n\n    $ wget http://production1.test.com:3470/deploy/vurrbab8rj780faz; \\\n      wget http://production2.test.com:3470/deploy/vurrbab8rj780faz; \\\n      [...]\n\nIt is better to create a simple script and add it to your application's repo,\nwhich will be run after a deployment.\nThis script (called e.g. `deploy-all.sh`) may run multiple wget commands.\n\n    $ deployment-server --testdir . --exec \"bin/deploy-all.sh\"\n\nThe number of servers may be variable though. More sophisticated versions of this script\nwould first learn how many servers are running, their locations, and access them in turn.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Alex Fernández <alexfernandeznpm@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n","starsCount":1,"created":"2013-09-11T23:30:31.795Z","modified":"2016-11-14T22:46:57.336Z","lastPublisher":{"name":"alexfernandez","email":"alexfernandeznpm@gmail.com"},"owners":[{"name":"alexfernandez","email":"alexfernandeznpm@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"deployment","_nodeVersion":"0.10.25","_npmOperationalInternal":{"host":"packages-13-west.internal.npmjs.com","tmp":"tmp/deployment-0.2.3.tgz_1458234324500_0.6100898252334446"},"_npmUser":{"name":"alexfernandez","email":"alexfernandeznpm@gmail.com"},"_npmVersion":"2.7.5","_rev":"2-b7f9e7f5d48dddf43e1e78951fd07bef","_shasum":"05aa9007612cf9a1457349412e14a4685c5fa688","bugs":{"url":"https://github.com/alexfernandez/deployment/issues"},"contributors":[{"name":"Alex Fernández","email":"alexfernandeznpm@gmail.com"}],"directories":{},"dist-tags":{"latest":"0.2.3"},"dist":{"shasum":"05aa9007612cf9a1457349412e14a4685c5fa688","tarball":"http://registry.npmjs.org/deployment/-/deployment-0.2.3.tgz"},"maintainers":[{"name":"alexfernandez","email":"alexfernandeznpm@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-11-14T22:46:57.336Z","created":"2013-09-11T23:30:31.795Z","0.0.1":"2013-09-11T23:30:35.436Z","0.0.2":"2013-09-11T23:45:06.696Z","0.0.3":"2013-09-15T21:34:26.290Z","0.0.4":"2013-09-15T23:31:34.974Z","0.0.5":"2013-09-18T22:28:31.194Z","0.0.6":"2013-09-18T22:45:14.791Z","0.0.7":"2013-09-19T01:09:54.170Z","0.0.8":"2013-09-19T01:17:47.605Z","0.0.9":"2013-09-28T10:59:44.651Z","0.1.1":"2013-09-30T23:40:31.961Z","0.1.2":"2013-10-04T22:19:36.965Z","0.1.3":"2013-10-07T16:54:09.253Z","0.1.4":"2013-10-12T23:49:52.249Z","0.1.6":"2013-10-29T22:50:12.274Z","0.1.7":"2013-12-12T01:02:28.193Z","0.1.8":"2013-12-15T01:12:00.521Z","0.1.9":"2014-01-15T14:35:20.345Z","0.2.0":"2015-09-22T17:27:54.475Z","0.2.1":"2015-09-22T17:31:08.047Z","0.2.2":"2016-01-22T17:24:11.672Z","0.2.3":"2016-03-17T17:05:26.962Z"},"users":{"mparaiso":true}}}