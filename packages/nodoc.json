{"name":"nodoc","version":"0.3.6","main":"dist/index.js","description":"A simple and 'low-level' source code comments parser and gitHub flavored markdown API documentation generator.","scripts":{"test":"echo \"Error: no test specified\" && exit 1","prepubish":"no"},"repository":"https://github.com/dracupid/nodoc","keywords":["doc","api","coffee","document","parser","generator","markdown","GFM","coffeescript"],"files":["dist"],"license":"MIT","homepage":"https://github.com/dracupid/nodoc","dependencies":{"underscore":"^1.8.3","yaku":"^0.7.4"},"devDependencies":{"coffee-script":"*","coffeelint":"*","dracupid-no":"git+https://github.com/dracupid/dracupid-no.git","nokit":"0.11.2"},"gitHead":"3e19bcbbcc0ed8463b881d737c5ab200b743db8c","versions":[{"number":"0.1.0","date":"2015-01-17T14:57:16.765Z"},{"number":"0.1.1","date":"2015-01-18T03:59:38.738Z"},{"number":"0.1.2","date":"2015-01-27T13:59:16.907Z"},{"number":"0.1.3","date":"2015-02-02T15:18:23.069Z"},{"number":"0.1.4","date":"2015-02-03T17:31:57.640Z"},{"number":"0.1.5","date":"2015-02-12T05:46:10.345Z"},{"number":"0.1.6","date":"2015-02-22T08:21:31.530Z"},{"number":"0.1.7","date":"2015-02-27T14:49:03.359Z"},{"number":"0.2.0","date":"2015-05-04T06:27:34.082Z"},{"number":"0.2.1","date":"2015-05-04T12:09:35.966Z"},{"number":"0.2.2","date":"2015-05-04T14:15:05.721Z"},{"number":"0.2.3","date":"2015-05-06T18:04:32.948Z"},{"number":"0.2.4","date":"2015-05-14T07:20:44.298Z"},{"number":"0.3.0","date":"2015-05-30T16:43:31.982Z"},{"number":"0.3.1","date":"2015-05-30T16:56:45.122Z"},{"number":"0.3.2","date":"2015-05-30T17:14:58.626Z"},{"number":"0.3.3","date":"2015-05-31T07:34:35.199Z"},{"number":"0.3.4","date":"2015-07-20T16:26:23.481Z"},{"number":"0.3.5","date":"2015-08-05T08:42:30.723Z"},{"number":"0.3.6","date":"2015-08-29T14:14:45.615Z"}],"readme":"# nodoc\nA simple and 'low-level' source code comments parser and documentation generator.\n> Oops, this doc is generated by nodoc itself !\n\n[![NPM version](https://badge.fury.io/js/nodoc.svg)](http://badge.fury.io/js/nodoc)\n[![Deps Up to Date](https://david-dm.org/dracupid/nodoc.svg?style=flat)](https://david-dm.org/dracupid/nodoc)\n\n## Supported Languages\n- CoffeeScript\n\n> Other languagage, especially javascript, will be supported soon.\n\n#### Language Name Aliases\nUse lower case, used both for language option and extname recognization.\n```javascript\n{\n    \"coffee\": \"coffee\",\n    \"coffeescript\": \"coffee\",\n    \"js\": \"javascript\",\n    \"javascript\": \"javascript\"\n}\n```\n\n\n## Usage\n0. Convert comment block to an object as following:\n#### Parsed Comment Object\n\n    ```javascript\n    {\n        name: 'parseFile',\n        description: 'Parse source code from file. Use Promise instead of callback',\n        tags: [ [Object], [Object], [Object], [Object] ], // tag objects array\n        lineNum: 78\n    }\n    ```\n    #### Tag Object\n    ```javascript\n    {\n        tagName: 'param',\n        type: 'string', // only @param, @property, @option, @return\n        name: 'srcPath', // only @param, @property, @option\n        description: 'Path of source code file'\n    }\n    ```\n    Tags are only key-value pairs, except `@param`, `@return`, `@property`, `@option`. They may have extra type and (maybe) name.\n\n    ```javascript\n    var doc = require('nodoc');\n\n    // From file\n    doc.parser.parseFile('./src/parser/index.coffee').then(function(res){});\n    res = doc.parser.parseFileSync('./src/parser/index.coffee')\n    //From source code\n    doc.parser.parse('A piece of source code', 'coffee').then(function(res){});\n    ```\n\n0. Generate gitHub flavored markdown API doc from comments.\n\n    ```javascript\n    var doc = require('nodoc'),\n        fs = require('fs');\n\n    doc.generate('./src/parser/index.coffee', {\n        moduleName: 'parser',\n        moduleDesc: 'This is a parser!'\n    }).then(function(markdown){\n        fs.writeFileSync('./api.md', markdown);\n    });\n    ```\n\n    In this case, predefined tags will make effects.\n\n    ### Predefined tags\n    + `@private`: Hidden in the generated document.\n    + `@nodoc`: Same behavior as `@private`, but they are differ in semantics.\n    + `@alias`: Shown as an addition of function name.\n    + `@prefix`: Add a custom prefix to function name.\n    + `@noPrefix`: Only preserve the real name, regard `util.promisify` as `promisify`.\n\n\n## Comment format\nOf course, you need to write your comments in a standard way to make a parser work.\nSuch as:\n```coffeescript\n###*\n * Generate formatted markdown API document from source code\n * @param  {string} srcPath    Path of source code file\n * @param  {Object={}} opts    Options, optional\n * @return {Promise}           Resolve formatted markdown\n * @example\n * ` ``javascript\n * nodoc.generate('./src/index.coffee').then(function(md){\n *     console.log(md);\n * });\n * ` ``\n###\n```\nAs you can see, you can use **markdown** in your comment!\n\n> Reference: [jsdoc](http://usejsdoc.org/)\n\n## API\n\n\n- #### <a href=\"./src/index.coffee?source#L91\" target=\"_blank\"><b>generate (srcPath, opts)  <small>(alias: render)</small> </b></a>\n    Generate formatted markdown API document from source code\n\n  - **param**: `srcPath` { _string_ }\n\n    Path of the source code file\n\n  - **param**: `opts` { _Object=_ }\n\n    Options\n    ```javascript\n    {\n        moduleName: '', // module name of the file, or it will be auto set to file name, of parent directory name for `index` file.\n        moduleDesc: '', // module decription\n        template: '',   // custom template\n        tplData: {},    // addition template data\n        cwd: process.cwd()   // current working directory\n        language: ''         // specify the language, or it will be auto recognized by extname\n        rule: {}             // specific parser rule, items vary from parsers\n    }\n    ```\n\n  - **return**:  { _Promise_ }\n\n    Resolve markdown\n\n  - **example**:  \n\n    ```javascript\n    nodoc.generate('./src/index.coffee').then(function(md){\n        console.log(md);\n    });\n    ```\n\n- #### <a href=\"./src/index.coffee?source#L121\" target=\"_blank\"><b>parser </b></a>\n    Parser module, see below for details.\n\n\n\n## Parser Module\n\n\n- #### <a href=\"./src/parser/index.coffee?source#L24\" target=\"_blank\"><b>parser.setParser (name, parser)</b></a>\n    Create a new parser or override an old ones\n\n  - **param**: `name` { _string|Array_ }\n\n    parser's name/language (and aliases)\n\n  - **param**: `parser` { _Object_ }\n\n    parser object, see below\n\n- #### <a href=\"./src/parser/index.coffee?source#L47\" target=\"_blank\"><b>parser.parse (source, language, opts)</b></a>\n    Parse source code directly.\n\n  - **param**: `source` { _string_ }\n\n    source code\n\n  - **param**: `language` { _string_ }\n\n    specify source language\n\n  - **param**: `opts` { _Object=_ }\n\n    option, optional\n\n  - **return**:  { _Array_ }\n\n    parsed comments object **array**\n\n  - **example**:  \n\n    ```javascript\n    nodoc.parser.parse(\"This is source code with comments\", \"coffee\").then(function(comments){\n        console.log(comments);\n    })\n    ```\n\n- #### <a href=\"./src/parser/index.coffee?source#L86\" target=\"_blank\"><b>parser.parseFile (filePath, opts = {})</b></a>\n    Parse source code from file. Use Promise instead of callback\n\n  - **param**: `filePath` { _string_ }\n\n    souce file path\n\n  - **param**: `opts` { _Object={}_ }\n\n    options\n\n  - **return**:  { _Promise_ }\n\n    resolve parsed comment object **array**\n\n  - **example**:  \n\n    ```javascript\n    nodoc.parser.parseFile(\"index.coffee\", {cwd: './src'}).then(function(comments){\n        console.log(comments);\n    });\n    ```\n\n- #### <a href=\"./src/parser/index.coffee?source#L94\" target=\"_blank\"><b>parser.parseFileSync ()</b></a>\n    Synchronous version of parseFile\n\n  - **return**:  { _Array_ }\n\n    parsed comment object **array**\n\n- #### <a href=\"./src/parser/index.coffee?source#L109\" target=\"_blank\"><b>parser.setRule (language, rule)</b></a>\n    Set parser's rule\n\n  - **param**: `language` { _string_ }\n\n    parser's name/language\n\n  - **param**: `rule` { _Object_ }\n\n    parser's rule object\n\n  - **example**:  \n\n    ```javascript\n    nodoc.parser.setRule('coffee', {\n        commentReg: /#?([\\s\\S]+?)#\\s+([\\w\\.]+)/g\n    });\n    ```\n\n\n\n\n## Write your own template\nNodoc uses [underscore template](http://underscorejs.org/#template) to render the markdown template. You need to realize that template is not HTML's privilege.\nIf you don't want to use the default template, you can use your own.\n```javascript\ndoc.generate('./src/parser/index.coffee', {\n    template: 'Here is your own template'\n    tplData: {}  // You can use this object to add custom data to your template\n}).then(function(markdown){});\n```\n\nHowever, if you even want to use a alternative template engine, please use parser module directly.\n\n## Write your own language parser\nIf the languages you use is not supported by nodoc, you can write your own parser and register it by `parser.setParser`. If you want your parser to be a part of nodoc, please make a pull request, it is warmly welcomed.\n\nA parser should provide follow APIs:\n### Parser API\n\n\n- #### <a href=\"./src/parser/coffee.coffee?source#L52\" target=\"_blank\"><b>parse (source, localRule)</b></a>\n    Parse comment from source code\n\n  - **param**: `source` { _string_ }\n\n    source code\n\n  - **param**: `localRule` { _Object=_ }\n\n    optional, custom rule object, use once\n\n  - **return**:  { _Array_ }\n\n    parsed comments object array\n\n- #### <a href=\"./src/parser/coffee.coffee?source#L72\" target=\"_blank\"><b>setRule (ruleObj)</b></a>\n    Set the rule of the parser\n\n  - **param**: `ruleObj` { _Object_ }\n\n    rule object\n\n- #### <a href=\"./src/parser/coffee.coffee?source#L78\" target=\"_blank\"><b>getRule ()</b></a>\n    Hmm..., I'd like to use this to generate document.\n\n  - **return**:  { _Object_ }\n\n    rule object\n\n\n\n### Rule\nA parser uses and is supposed to expose the rules it uses to parse the code.\n\n#### Rules for coffee parser\n```javascript\n{ commentReg: /###\\*([\\s\\S]+?)###\\s+([\\w\\.@'\"]+)/g,\n  splitReg: /^\\s+\\* ?@/m,\n  tagNameReg: /^([\\w\\.]+)\\s*/,\n  typeReg: /^\\{(.+|}?)\\}\\s*/,\n  nameReg: /^([\\w\\.]+)\\s*/,\n  nameTags: [ 'param', 'property', 'option' ],\n  descriptionReg: /^([\\s\\S]*)/,\n  removePrefix: /self\\.|this\\.|@|'|\"/g }\n```\n\n### License\nMIT\n","created":"2015-01-17T14:57:16.765Z","modified":"2015-08-29T14:14:45.615Z","lastPublisher":{"name":"dracupid","email":"dracupid@gmail.com"},"owners":[{"name":"dracupid","email":"dracupid@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"nodoc","_nodeVersion":"0.12.7","_npmUser":{"name":"dracupid","email":"dracupid@gmail.com"},"_npmVersion":"3.3.0","_rev":"1-26aeb2f730117910ccd4511b507ea4eb","_shasum":"1b816b6b733f3bd6a5a09c076f0b63935ddba06c","author":{"name":"Dracupid"},"bugs":{"url":"https://github.com/dracupid/nodoc/issues"},"directories":{},"dist-tags":{"latest":"0.3.6"},"dist":{"shasum":"1b816b6b733f3bd6a5a09c076f0b63935ddba06c","tarball":"http://registry.npmjs.org/nodoc/-/nodoc-0.3.6.tgz"},"maintainers":[{"name":"dracupid","email":"dracupid@gmail.com"}],"readmeFilename":"Readme.md","time":{"modified":"2015-08-29T14:14:45.615Z","created":"2015-01-17T14:57:16.765Z","0.1.0":"2015-01-17T14:57:16.765Z","0.1.1":"2015-01-18T03:59:38.738Z","0.1.2":"2015-01-27T13:59:16.907Z","0.1.3":"2015-02-02T15:18:23.069Z","0.1.4":"2015-02-03T17:31:57.640Z","0.1.5":"2015-02-12T05:46:10.345Z","0.1.6":"2015-02-22T08:21:31.530Z","0.1.7":"2015-02-27T14:49:03.359Z","0.2.0":"2015-05-04T06:27:34.082Z","0.2.1":"2015-05-04T12:09:35.966Z","0.2.2":"2015-05-04T14:15:05.721Z","0.2.3":"2015-05-06T18:04:32.948Z","0.2.4":"2015-05-14T07:20:44.298Z","0.3.0":"2015-05-30T16:43:31.982Z","0.3.1":"2015-05-30T16:56:45.122Z","0.3.2":"2015-05-30T17:14:58.626Z","0.3.3":"2015-05-31T07:34:35.199Z","0.3.4":"2015-07-20T16:26:23.481Z","0.3.5":"2015-08-05T08:42:30.723Z","0.3.6":"2015-08-29T14:14:45.615Z"}}}