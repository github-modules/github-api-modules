{"name":"octop","version":"1.1.0","description":"A higher-level wrapper around the Github API.","main":"github.js","dependencies":{"atob":"1.1.2","btoa":"1.1.2","xmlhttprequest":"1.7.0"},"devDependencies":{"argg":"0.0.1","istanbul":"^0.3.13","jshint":"^2.5.8","plato":"^1.4.0","tape":"^3.0.3","testling":"^1.7.1"},"scripts":{"test":"node node_modules/argg test/*.js && node node_modules/jshint/bin/jshint github.js test/*.js","jshint":"node node_modules/jshint/bin/jshint github.js test/*.js"},"repository":"https://github.com/michael/github","keywords":["github","api"],"license":"BSD","gitHead":"aa8aa3c8cd5ce5240373d4fd1d06a7ab4af41a36","browser":{"xmlhttprequest":false},"testling":{"files":"test/test.*.js","browsers":["iexplore/9.0..latest","chrome/18.0..latest","firefox/15.0..latest","opera/11.0..latest","safari/5.0.5..latest","iphone/6.0..latest","ipad/6.0..latest","android-browser/4.2..latest"]},"homepage":"https://github.com/michael/github#readme","versions":[{"number":"1.0.0","date":"2015-09-24T06:04:53.582Z"},{"number":"1.0.1","date":"2015-09-24T06:10:09.046Z"},{"number":"1.0.3","date":"2015-09-24T07:58:58.541Z"},{"number":"1.0.4","date":"2015-09-24T10:29:26.906Z"},{"number":"1.0.5","date":"2015-09-24T10:34:39.633Z"},{"number":"1.0.6","date":"2015-09-24T10:47:30.046Z"},{"number":"1.0.7","date":"2015-09-25T05:53:43.611Z"},{"number":"1.0.8","date":"2015-10-05T14:23:56.950Z"},{"number":"1.1.0","date":"2016-03-27T06:29:44.530Z"}],"readme":"# Octop\n\n[![Build Status](https://travis-ci.org/weflex/octop.svg?branch=master)](https://travis-ci.org/weflex/octop)\n\nOctop provides a minimal higher-level wrapper around git's [plumbing commands](http://git-scm.com/book/en/Git-Internals-Plumbing-and-Porcelain), exposing an API for manipulating GitHub repositories on the file level. It is being developed in the context of [Prose](http://prose.io), a content editor for GitHub.\n\nThis repo is now officially maintained by [WeFlex](https://github.com/weflex).\n\n> Note: this is a fork from [michael/github](https://github.com/michael/github), thanks to DevelopmentSeed.\n\n## Installation\n\nEither grab `octop` from this repo or install via NPM:\n\n```\nnpm install octop --save\n```\n\n## Usage\n\nCreate a Github instance.\n\n```js\nvar github = new Github({\n  username: \"YOU_USER\",\n  password: \"YOUR_PASSWORD\",\n  auth: \"basic\"\n});\n```\n\nOr if you prefer OAuth, it looks like this:\n\n```js\nvar github = new Github({\n  token: \"OAUTH_TOKEN\",\n  auth: \"oauth\"\n});\n```\n\nYou can use either:\n* Authorised App Tokens (via client/secret pairs), used for bigger applications, created in web-flows/on the fly\n* Personal Access Tokens (simpler to set up), used on command lines, scripts etc, created in GitHub web UI\n\nSee these pages for more info:\n\n+ [Creating an access token for command-line use](https://help.github.com/articles/creating-an-access-token-for-command-line-use)\n+ [Github API OAuth Overview](http://developer.github.com/v3/oauth)\n\nEnterprise Github instances may be specified using the `apiUrl` option:\n\n```js\nvar github = new Github({\n  apiUrl: \"https://serverName/api/v3\",\n  ...\n});\n```\n\n## Repository API\n\n\n```js\nvar repo = github.getRepo(username, reponame);\n```\n\nShow repository information\n\n```js\nrepo.show(function(err, repo) {});\n```\n\nDelete a repository\n\n```js\nrepo.deleteRepo(function(err, res) {});\n```\n\nGet contents at a particular path in a particular branch.\n\n```js\nrepo.contents(branch, \"path/to/dir\", function(err, contents) {});\n```\n\nFork repository. This operation runs asynchronously. You may want to poll for `repo.contents` until the forked repo is ready.\n\n```js\nrepo.fork(function(err) {});\n```\n\nCreate new branch for repo. You can omit oldBranchName to default to \"master\".\n\n```js\nrepo.branch(oldBranchName, newBranchName, function(err) {});\n```\n\nList Pull Requests.\n\n```js\nvar state = 'open'; //or 'closed', or 'all'\nrepo.listPulls(state, function(err, pullRequests) {});\n```\n\nGet details of a Pull Request.\n\n```js\nvar pullRequestID = 123;\nrepo.getPull(pullRequestID, function(err, pullRequestInfo) {});\n```\n\nCreate Pull Request.\n\n```js\nvar pull = {\n  title: message,\n  body: \"This pull request has been automatically generated by Prose.io.\",\n  base: \"gh-pages\",\n  head: \"michael\" + \":\" + \"prose-patch\"\n};\nrepo.createPullRequest(pull, function(err, pullRequest) {});\n```\n\nRetrieve all available branches (aka heads) of a repository.\n\n```js\nrepo.listBranches(function(err, branches) {});\n```\n\nStore contents at a certain path, where files that don't yet exist are created on the fly.\n\n```js\nrepo.write('master', 'path/to/file', 'YOUR_NEW_CONTENTS', 'YOUR_COMMIT_MESSAGE', function(err) {});\n```\n\nNot only can you can write files, you can of course read them.\n\n```js\nrepo.read('master', 'path/to/file', function(err, data) {});\n```\n\nMove a file from A to B.\n\n```js\nrepo.move('master', 'path/to/file', 'path/to/new_file', function(err) {});\n```\n\nRemove a file.\n\n```js\nrepo.remove('master', 'path/to/file', function(err) {});\n```\n\nGet information about a particular commit.\n\n```js\nrepo.getCommit('master', sha, function(err, commit) {});\n```\n\nExploring files of a repository is easy too by accessing the top level tree object.\n\n```js\nrepo.getTree('master', function(err, tree) {});\n```\n\nIf you want to access all blobs and trees recursively, you can specify 2nd argument\n\n```js\nrepo.getTree('master', true, function(err, tree) {});\n```\n\nGiven a filepath, retrieve the reference blob or tree sha.\n\n```js\nrepo.getSha('master', '/path/to/file', function(err, sha) {});\n```\n\nFor a given reference, get the corresponding commit sha.\n\n```js\nrepo.getRef('heads/master', function(err, sha) {});\n```\n\nCreate a new reference.\n\n```js\nvar refSpec = {\n  \"ref\": \"refs/heads/my-new-branch-name\",\n  \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n};\nrepo.createRef(refSpec, function(err) {});\n```\n\nDelete a reference.\n\n```js\nrepo.deleteRef('heads/gh-pages', function(err) {});\n```\n\nGet contributors list with additions, deletions, and commit counts.\n\n```js\nrepo.contributors(function(err, data) {});\n```\n\n## User API\n\n\n```js\nvar user = github.getUser();\n```\n\nList all repositories of the authenticated user, including private repositories and repositories in which the user is a collaborator and not an owner.\n\n```js\nuser.repos(function(err, repos) {});\n```\n\nList organizations the autenticated user belongs to.\n\n```js\nuser.orgs(function(err, orgs) {});\n```\n\nList authenticated user's gists.\n\n```js\nuser.gists(function(err, gists) {});\n```\n\nList private & public events for the authenticated user.\n\n```js\nuser.events(function(err, events) {});\n```\n\nList unread notifications for the authenticated user.\n\n```js\nuser.notifications(function(err, notifications) {});\n```\n\nShow user information for a particular username. Also works for organizations.\n\n```js\nuser.show(username, function(err, user) {});\n```\n\nList public repositories for a particular user.\n\n```js\nuser.userRepos(username, function(err, repos) {});\n```\n\nCreate a new repo for the authenticated user\n\n```js\nuser.createRepo({\"name\": \"test\"}, function(err, res) {});\n```\nRepo description, homepage, private/public can also be set.\nFor a full list of options see the docs [here](https://developer.github.com/v3/repos/#create)\n\n\nList repositories for a particular organization. Includes private repositories if you are authorized.\n\n```js\nuser.orgRepos(orgname, function(err, repos) {});\n```\n\nList all gists of a particular user. If username is ommitted gists of the current authenticated user are returned.\n\n```js\nuser.userGists(username, function(err, gists) {});\n```\n\n## Gist API\n\n```js\nvar gist = github.getGist(3165654);\n```\n\nRead the contents of a Gist.\n\n```js\ngist.read(function(err, gist) {\n\n});\n```\n\nUpdating the contents of a Gist. Please consult the documentation on [GitHub](http://developer.github.com/v3/gists/).\n\n```js\nvar delta = {\n  \"description\": \"the description for this gist\",\n  \"files\": {\n    \"file1.txt\": {\n      \"content\": \"updated file contents\"\n    },\n    \"old_name.txt\": {\n      \"filename\": \"new_name.txt\",\n      \"content\": \"modified contents\"\n    },\n    \"new_file.txt\": {\n      \"content\": \"a new file\"\n    },\n    \"delete_this_file.txt\": null\n  }\n};\n\ngist.update(delta, function(err, gist) {\n\n});\n```\n## Issues API\n\n```js\nvar issues = github.getIssues(username, reponame);\n```\n\nTo read all the issues of a given repository\n\n```js\nissues.list(options, function(err, issues) {});\n```\n\n##Setup\n\nGithub.js has the following dependency:\n\n- btoa (included in modern browsers, an npm module is included in package.json for node)\n\n## Compatibility\n\n[![browser support](https://ci.testling.com/darvin/github.png)](https://ci.testling.com/darvin/github)\n","created":"2015-09-24T06:04:53.582Z","modified":"2016-03-27T06:29:44.530Z","lastPublisher":{"name":"yorkie","email":"yorkiefixer@gmail.com"},"owners":[{"name":"yorkie","email":"yorkiefixer@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"octop","_nodeVersion":"5.6.0","_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/octop-1.1.0.tgz_1459060183489_0.1340060499496758"},"_npmUser":{"name":"yorkie","email":"yorkiefixer@gmail.com"},"_npmVersion":"3.6.0","_rev":"1-99f6a2fe160e35d93993d270ccfbef9e","_shasum":"6c511ec8ac44dc48c222cac9a5676f3c1db06df8","bugs":{"url":"https://github.com/michael/github/issues"},"contributors":[{"name":"Yorkie Liu","email":"yorkiefixer@gmail.com","url":"http://yorkie.ninja"},{"name":"Sergey Klimov","email":"sergey.v.klimov@gmail.com","url":"http://darvin.github.com/"},{"name":"Michael Aufreiter","url":"http://substance.io"},{"name":"Ã†ndrew Rininsland","email":"aendrew.rininsland@thetimes.co.uk","url":"http://www.aendrew.com"}],"directories":{},"dist-tags":{"latest":"1.1.0"},"dist":{"shasum":"6c511ec8ac44dc48c222cac9a5676f3c1db06df8","tarball":"http://registry.npmjs.org/octop/-/octop-1.1.0.tgz"},"maintainers":[{"name":"yorkie","email":"yorkiefixer@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2016-03-27T06:29:44.530Z","created":"2015-09-24T06:04:53.582Z","1.0.0":"2015-09-24T06:04:53.582Z","1.0.1":"2015-09-24T06:10:09.046Z","1.0.3":"2015-09-24T07:58:58.541Z","1.0.4":"2015-09-24T10:29:26.906Z","1.0.5":"2015-09-24T10:34:39.633Z","1.0.6":"2015-09-24T10:47:30.046Z","1.0.7":"2015-09-25T05:53:43.611Z","1.0.8":"2015-10-05T14:23:56.950Z","1.1.0":"2016-03-27T06:29:44.530Z"}}}