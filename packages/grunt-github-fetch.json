{"name":"grunt-github-fetch","description":"Fetch assets from github repositories releases using Github cool API","version":"0.1.2","homepage":"https://github.com/FlorentMarima/grunt-github-fetch","repository":"https://github.com/FlorentMarima/grunt-github-fetch","licenses":[{"type":"MIT","url":"https://github.com/FlorentMarima/grunt-github-fetch/blob/master/LICENSE-MIT"}],"engines":{"node":">= 0.8.0"},"scripts":{"test":"grunt test"},"devDependencies":{"grunt-contrib-jshint":"^0.9.2","grunt-contrib-clean":"^0.5.0","grunt-contrib-nodeunit":"^0.3.3","grunt":"~0.4.4","chalk":"^0.4.0"},"peerDependencies":{"grunt":"~0.4.4"},"keywords":["gruntplugin","github","release","asset","assets","fetch"],"versions":[{"number":"0.1.0","date":"2014-05-22T18:13:40.395Z"},{"number":"0.1.1","date":"2014-05-22T18:21:20.901Z"},{"number":"0.1.2","date":"2014-05-22T18:23:19.895Z"}],"readme":"# grunt-github-fetch\n\n> Fetch assets from github repositories releases using Github cool API\n\n## Getting Started\nThis plugin requires Grunt `~0.4.4`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-github-fetch --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-github-fetch');\n```\n\n## The \"github_fetch\" task\n\n### Why\nLet's say divided one big monolithic piece of code into cool services in different repositories (**private or not**). You might need to be able to maintain the \"link\" between the services or part of services concording to the right tags and version. Github provides a nice API to deal with assets (files you uploaded when you released), but humanly, it's kind of annoying to do some `curl` or whatever etc... Here is one possible way to do it. \n\n### Overview\nIn your project's Gruntfile, add a section named `github_fetch` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  github_fetch: {\n    repo_1: {\n        options: {\n        // Task-specific options go here.\n        }\n    },\n    repo_2: {\n        options: {\n        // Task-specific options go here.\n        }\n    }\n  },\n});\n```\n\n### Options\n\nConsider a classic github repository URL :\n//github.com/:owner/:repository\n\n#### options.repository\nType: `String`\n**REQUIRED**\n\nThe targeted repository name\n#### options.owner\nType: `String`\n**REQUIRED**\n\nThe owner of the targeted repository\n\n#### options.tag\nType: `String`\n**REQUIRED**\n\nThe tag of the targeted release (*example* ``tag : \"v1.0\"``)\n\n#### options.filename\nType: `String`\n**REQUIRED**\n\nThe name of the file you want to retrieve from the target\n\n#### options.tokenFile\nType: `String`\n**OPTIONAL** (but *RECOMMENDED*)\n\nPath to a json file that contains your Github Application token\nIt should contain {Â \"token\" : \"XXXX\" }\nSee below for more explanation about Github token.\n\n#### options.output\nType: `String`\n**OPTIONAL** \n\nPath. When specified, the retrieve asset is stored as output\n\n\n\n### About Github Application Token\n\n#### Where?\nhttps://github.com/settings/applications -> Personal Access Token\n\n#### Why?\nGithub API requests are limited to 60 per hour for user without access token. It could be bothersome. This limit is 5000 when using a token. Moreover, **if you intend to fetch assets from a private repository, this becomes** **REQUIRED**\n\n#### Tips\nGitignore your tokenFile but let the other contributors know that one is required by adding a _tokenFile_.json.dist file containing: \n```\n{\n    \"token\" : \"XXXXXXXXXXXXX\"\n}\n```\nThey will then need to transform it into a valid _tokenFile_.json file\n\n\n#### Some Behavior precision\nIf `output` option is not specified, the asset is downloaded as it is in your root directory (where your Gruntfile.js probably is)\n\n** Classic example **\n```js\ngrunt.initConfig({\n  github_fetch: {\n    repo_1: { // this is important\n        options: {\n            tokenFile : 'token.json'\n            repository : 'cool-app',\n            owner: 'John',\n            tag: 'v1.0',\n            filename: 'script.js',\n            output: 'external/script.js'\n            // Fetching script.js from the tagged v1.0 release on John's cool-app repository using the github token stored in token.json\n        }\n    },\n  },\n});\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n","created":"2014-05-22T18:13:40.395Z","modified":"2014-05-22T18:23:19.895Z","lastPublisher":{"name":"fgnx","email":"florent.marima@gmail.com"},"owners":[{"name":"fgnx","email":"florent.marima@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"grunt-github-fetch","_npmUser":{"name":"fgnx","email":"florent.marima@gmail.com"},"_npmVersion":"1.4.3","_rev":"1-8177ab1e52c40c5d50cb78a45c281ab7","author":{"name":"Florent Marima","email":"fmarima@alkemics.com"},"bugs":{"url":"https://github.com/FlorentMarima/grunt-github-fetch/issues"},"directories":{},"dist-tags":{"latest":"0.1.2"},"dist":{"shasum":"7b767584038466baef36ca39d4c8e6c243b0f475","tarball":"http://registry.npmjs.org/grunt-github-fetch/-/grunt-github-fetch-0.1.2.tgz"},"maintainers":[{"name":"fgnx","email":"florent.marima@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2014-05-22T18:23:19.895Z","created":"2014-05-22T18:13:40.395Z","0.1.0":"2014-05-22T18:13:40.395Z","0.1.1":"2014-05-22T18:21:20.901Z","0.1.2":"2014-05-22T18:23:19.895Z"}}}