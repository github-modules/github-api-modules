{"name":"hubfs.js","version":"1.0.0","description":"Github API wrapper to writeFile and readFile","main":"index.js","scripts":{"test":"standard && node test.js | tap-spec","doc":"dox -r < index.js | doxme --readme > README.md"},"keywords":["github","api","fs","writefile","readfile"],"license":"MIT","devDependencies":{"buffer-equal":"0.0.1","dotenv":"^0.5.1","dox":"^0.6.1","doxme":"^1.8.1","octokat":"^0.4.7","standard":"^3.3.0","tap-spec":"^2.2.2","tape":"^3.5.0"},"dependencies":{"async":"^0.9.0","octokat":"^0.4.9","xtend":"^4.0.0"},"repository":"https://github.com/gmaclennan/hubfs.js","homepage":"https://github.com/gmaclennan/hubfs.js","gitHead":"e874e336887a9cc9970116ff164c563c4d910ef9","versions":[{"number":"0.0.1","date":"2015-03-02T06:44:43.227Z"},{"number":"0.0.2","date":"2015-03-02T17:55:34.224Z"},{"number":"0.0.3","date":"2015-03-05T21:45:29.015Z"},{"number":"0.0.4","date":"2015-03-28T01:40:10.422Z"},{"number":"0.1.0","date":"2015-03-30T18:51:31.153Z"},{"number":"1.0.0","date":"2015-03-30T20:59:23.342Z"}],"readme":"# hubfs.js\n\n[![build status](https://secure.travis-ci.org/gmaclennan/hubfs.js.png)](http://travis-ci.org/gmaclennan/hubfs.js)\n\nGithub API wrapper to writeFile and readFile\n\n\n### `Hubfs(options)`\n\nA mixin for [Octokat.js](https://github.com/philschatz/octokat.js) that\nprovides a simple wrapper for writing to and reading from a repo. It\nreplicates node.js `fs.readFile` and `fs.writeFile`. It has a few special\nfeatures:\n\n1. **Minimize requests**\n\n    By default it tries to use the Github [contents\nAPI](https://developer.github.com/v3/repos/contents/) to read, write with a\nsingle request and update a file with 3 requests: (a) tries to write; (b)\ngets sha for existing file; (c) writes update\n\n2. **Read and update large files**\n\n    The contents API cannot read or update files larger than 1Mb. Hubfs\nswitches to the [git API](https://developer.github.com/v3/git/) to read and\nupdate files up to 100Mb\n\n3. **Simultaneous writes**\n\n    Repeatedly writing to the contents API [will result in an\nerror](http://stackoverflow.com/questions/19576601/github-api-issue-with-file-upload)\nbecause of delays updating the HEAD, and making multiple simultaneous\nwrites will result in the same problem of Fast Forward commits. Hubfs will\nautomatically queue up requests and switch to using the git API for\nmultiple parallel writes. It will batch together multiple writes to the\nsame repo in commits of up to 10 files, but will make commits as quickly as\nit can.\n\n**Limitations**\n\n- Repeat writes do not currently respect `options.flags='wx'` (they will\noverwrite existing files)\n\n- Maximum batch size for commits cannot be changed, awaiting [upstream\nasync issue](https://github.com/caolan/async/pull/740)\n\n### Breaking change in v1.0.0\n\nNo longer operates as a Octokat mixin, instead new instances are created\nwith an `options` object with the owner, repo and auth, which is passed\nto Octokat.\n\n\n### Parameters\n\n| parameter | type   | description                                                                                                                                                                              |\n| --------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `options` | Object | `options.owner` Github repo owner, `options.repo` repo name, `options.auth` (optional) passed through to a new\n[Octokat instance](https://github.com/philschatz/octokat.js#in-a-browser) |\n\n\n### Example\n\n```js\nvar Hubfs = require('Hubfs')\n\nvar options = {\n  owner: 'github_username',\n  repo: 'github_repo_name'\n  auth: {\n    username: \"USER_NAME\",\n    password: \"PASSWORD\"\n  }\n}\n\nvar gh = Hubfs(options)\n```\n\n\n**Returns** `Object`, returns and instance of Hubfs with two methods `readFile` and `writeFile`.\n\n\n### `writeFile(filename, data, [options], callback)`\n\nAsynchronously writes data to a file on Github, replacing the file if it\nalready exists. `data` can be a string or a buffer.\n\nThe `encoding` option is ignored if `data` is a buffer. It defaults to `'utf8'`.\n\nThe file path is always interpreted from the root of the repo, whether or\nnot it is preceded by a slash.\n\n\n### Parameters\n\n| parameter   | type           | description                                                                                                                                                                                       |\n| ----------- | -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `filename`  | String         |                                                                                                                                                                                                   |\n| `data`      | String\\,Buffer |                                                                                                                                                                                                   |\n| `[options]` | Object         | _optional:_ `options.encoding='utf8'` `options.flag='w'` default will overwrite, `'wx'` will fail if path exists. `options.message` Commit message. `options.branch='master'` branch to write to. |\n| `callback`  | Function       |                                                                                                                                                                                                   |\n\n\n### Example\n\n```js\ngh.writeFile('message.txt', 'Hello Github', function (err) {\n  if (err) throw err\n  console.log('It\\'s saved!')\n})\n```\n\n\n### `readFile(filename, [options], callback)`\n\nAsynchronously read a file on Github.\n\nThe file path is always interpreted from the root of the repo, whether or\nnot it is preceded by a slash.\n\nThe callback is passed two arguments `(err, data)`, where `data` is the\ncontents of the file.\n\nIf no encoding is specified, then the raw buffer is returned.\n\n### Parameters\n\n| parameter   | type     | description                                                                                               |\n| ----------- | -------- | --------------------------------------------------------------------------------------------------------- |\n| `filename`  | String   |                                                                                                           |\n| `[options]` | Object   | _optional:_ `options.encoding=null` (returns Buffer) `options.ref='master'` name of the commit/branch/tag |\n| `callback`  | Function |                                                                                                           |\n\n\n### Example\n\n```js\ngh.readFile('/my_folder/my_file.txt', function (err, data) {\n  if (err) throw err\n  console.log(data)\n})\n```\n\n## Installation\n\nRequires [nodejs](http://nodejs.org/).\n\n```sh\n$ npm install hubfs.js\n```\n\n## Tests\n\n```sh\n$ npm test\n```\n\n\n","created":"2015-03-02T06:44:43.227Z","modified":"2015-03-30T20:59:23.342Z","lastPublisher":{"name":"gmaclennan","email":"gmaclennan@digital-democracy.org"},"owners":[{"name":"gmaclennan","email":"gregor@cantab.net"}],"other":{"_attachments":{},"_from":".","_id":"hubfs.js","_nodeVersion":"0.10.38","_npmUser":{"name":"gmaclennan","email":"gmaclennan@digital-democracy.org"},"_npmVersion":"2.7.3","_rev":"1-e5fc83dcf9ee58655fd9ec65b4ded0a5","_shasum":"8b7508688434b50d87d6ea1cd1a9c9383c0b262a","author":{"name":"Gregor MacLennan"},"bugs":{"url":"https://github.com/gmaclennan/hubfs.js/issues"},"directories":{},"dist-tags":{"latest":"1.0.0"},"dist":{"shasum":"8b7508688434b50d87d6ea1cd1a9c9383c0b262a","tarball":"http://registry.npmjs.org/hubfs.js/-/hubfs.js-1.0.0.tgz"},"maintainers":[{"name":"gmaclennan","email":"gregor@cantab.net"}],"readmeFilename":"README.md","time":{"modified":"2015-03-30T20:59:23.342Z","created":"2015-03-02T06:44:43.227Z","0.0.1":"2015-03-02T06:44:43.227Z","0.0.2":"2015-03-02T17:55:34.224Z","0.0.3":"2015-03-05T21:45:29.015Z","0.0.4":"2015-03-28T01:40:10.422Z","0.1.0":"2015-03-30T18:51:31.153Z","1.0.0":"2015-03-30T20:59:23.342Z"}}}