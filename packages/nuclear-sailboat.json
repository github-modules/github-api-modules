{"name":"nuclear-sailboat","version":"0.2.1","main":"./index.js","browser":"./client/nuclear-sailboat.js","dependencies":{"react":"^15.3.2","react-dom":"^15.3.2","load-grunt-tasks":"^3.5.2"},"repository":"https://github.com/goodells/nuclear-sailboat","gitHead":"f8e292b89789846ad19fce543e11a68f32856a73","description":"A comprehensive [React](https://facebook.github.io/react/) middleware and client reconciliation library for [Sails.js](http://sailsjs.org/)","homepage":"https://github.com/goodells/nuclear-sailboat#readme","scripts":{},"versions":[{"number":"0.2.0","date":"2016-11-07T00:43:15.230Z"},{"number":"0.2.1","date":"2016-11-08T23:18:25.325Z"}],"readme":"# Nuclear Sailboat @0.2.0\n\nA comprehensive [React](https://facebook.github.io/react/) middleware and client reconciliation library for [Sails.js](http://sailsjs.org/)\n\n\n----------\n\n**This library is under active, pre-alpha development and the documentation provided herein may not be accurate.**\n\n----------\n\n\n## Features\n\n* Isomorphic components - rendered on the server, reconciled on the client (✝)\n* Lazy-loading and per-page caching of components (✝)\n* No additional client dependencies besides React/ReactDOM\n* Highly configurable\n\n✝ may be disabled with configuration\n\n## Installation\n\nDue to the nature of how Nuclear Sailboat must be integrated into a Sails project, it is not feasible at this time to offer an automated way to do these things.  Each step of the installation offers some kind of configuration which should not be consolidated.  In the future, Sails may have some sort of addon system that would be suitable.\n\nNote that if you would like to use JSX syntax, that should be set up separately as it is not part of the package's core functionality.  For a guide on doing this (in a way that is compatible with this package), please see [Guide: Using JSX via Babel in the Asset Pipeline]().\n\n### 1. Install the package\n\nInstall via [npm](https://www.npmjs.com/package/nuclear-sailboat):\n\n```bash\nnpm install nuclear-sailboat\n```\n\nAdd it to your project's `package.json`:\n\n```json\n// package.json\n{\n    ...,\n    \"dependencies\": {\n        ...,\n        \"nuclear-sailboat\": \"latest\"\n    }\n}\n```\n\n### 2. Configure the middleware\n\nIn your project's `config/http.js` file, add the following middleware declaration:\n\n```javascript\n// config/http.js\nmodule.exports.http = {\n    ...,\n    middleware: {\n        ...,\n        react: require('nuclear-sailboat').middleware(require('path').join(__dirname, '..')),\n        ...,\n        order: [\n            ...,\n            'react',\n            ...\n        ]\n    }\n};\n```\n\n*The reason that the project root directory is passed as an argument is so that components can be found in their default location.*\n\nThis loads the middleware with the default settings, which should be good enough for most use cases.  If you would like to granularly override the configuration, use `.configuredMiddleware({ ... })` insyead of `.middleware`.  For detailed information on what configuration options are available, see [Guide: Configuration]().\n\nThe order in which the middleware is called is not very important, but err towards putting it earlier rather than later.\n\n### 3. Add client dependency\n\nIn order to reconcile components on the client after a page is loaded, React must be accessible from the `window` object.  There are many ways to do this.  The simplest way to do this is to put `react.min.js` in `assets/js/dependencies` and put a script tag in `layout/index.ejs` so that it is available on all pages.\n\n## Usage\n\n### Defining components\n\nBy default, components are defined in the `assets/js/components/` folder.  The way that you define components is agnostic of the framework - the only requirement is that calling `require('assets/js/components/YourComponentName')` be able to find it - either in `.../YourComponentName.js` or `.../YourComponentName/index.js` or some other main entry point as specified by a `package.json`.  If you can't conform to this requirement or need to do something more complicated, see [Guide: Overriding Finding Components]().\n\nDue to the isomorphic nature of Nuclear Sailboat, some restrictions apply to how the components themselves can work.  For components that are rendered on the server, in methods invoked before the component is mounted, they:\n\n* cannot reference client-only global variables such as `document` and `window`\n* cannot reference server-only variables such as `require` (unless using something like [Browserify](http://browserify.org/), which is recommended for better compatibility), `global`, and `module`\n* cannot use client-only APIs and libraries such as the DOM and jQuery\n* reflect in the initial rendered result any inconsistent state (i.e. cause the server's result to be different than what the client expects)\n\n### Embedding components\n\nTo embed a component in a page, call the `component` function in an EJS file:\n\n```html\n<h1>Hello world, I'm a regular heading!</h1>\n<%- component('TestComponent`, { someProperty: \"This is pretty cool, right?\" }) %>\n```\n\n*Note that because it is embedding content on the page from a string, the raw `<%-` embed tag is required.  React sanitizes the resulting markup already - I assure you that I don't take raw content injection lightly and that this is safe.*\n\nThis does two things:\n\n* renders the component on the server and embeds this result on the page\n* embeds a small script that mounts the component on the page with the same properties and children once it's loaded\n\nAs a result of the client reconciliation, properties passed to the component must be serializable as JSON.  It **is** possible to disable client reconciliation and thus remove this limitation.  Additionally, you can specify serialization and deserialization functions to communicate rich properties from the server to the client.","created":"2016-11-07T00:43:15.230Z","modified":"2016-11-08T23:18:25.325Z","lastPublisher":{"name":"goodells","email":"sam@mangane.se"},"owners":[{"name":"goodells","email":"sam@mangane.se"}],"other":{"_attachments":{},"_from":".","_id":"nuclear-sailboat","_nodeVersion":"4.2.6","_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/nuclear-sailboat-0.2.1.tgz_1478647104745_0.6252417762298137"},"_npmUser":{"name":"goodells","email":"sam@mangane.se"},"_npmVersion":"3.5.2","_rev":"2-9a429efedc35bc6777fbfbecf05fb155","_shasum":"8b8d9a4b5353fa316c370bd4fda7be9d616887f9","author":{"name":"Samuel Goodell","email":"sam@mangane.se","url":"http://mangane.se"},"bugs":{"url":"https://github.com/goodells/nuclear-sailboat/issues"},"directories":{},"dist-tags":{"latest":"0.2.1"},"dist":{"shasum":"8b8d9a4b5353fa316c370bd4fda7be9d616887f9","tarball":"http://registry.npmjs.org/nuclear-sailboat/-/nuclear-sailboat-0.2.1.tgz"},"maintainers":[{"name":"goodells","email":"sam@mangane.se"}],"readmeFilename":"README.md","time":{"modified":"2016-11-08T23:18:25.325Z","created":"2016-11-07T00:43:15.230Z","0.2.0":"2016-11-07T00:43:15.230Z","0.2.1":"2016-11-08T23:18:25.325Z"}}}