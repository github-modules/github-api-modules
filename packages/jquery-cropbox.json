{"name":"jquery-cropbox","version":"0.1.3","main":"jquery.cropbox.js","devDependencies":{"uglifycss":"0.0.7","uglify-js":"~2.4.0","jshint":"~2.3.0"},"dependencies":{},"repository":"https://github.com/acornejo/jquery-cropbox","licenses":[{"type":"MIT","url":"http://opensource.org/licenses/MIT"}],"scripts":{"prepublish":"./node_modules/.bin/uglifyjs -o jquery.cropbox.min.js jquery.cropbox.js; ./node_modules/.bin/uglifycss jquery.cropbox.css > jquery.cropbox.min.css","pretest":"./node_modules/.bin/jshint -e 'js,json' --exclude node_modules ."},"description":"jQuery plugin for in-place image cropping (zoom & pan, as opposed to select and drag).\n \n This plugin depends only on jQuery. If either `Hammer.js` or `jquery.hammer.js` is\n loaded, the cropbox plugin will support gestures for panning and zooming\n the cropbox. Similary, if the `jquery.mousewheel.js` plugin is loaded, then the\n cropbox plugin will support zoom in & out using the mousewheel. All\n dependencies on third party libraries (other than jQuery) are strictly\n optional. Support for CommonJS and AMD loading is built in.\n \n In browsers that support the HTML5 FIle API and Canvas API, the cropbox\n plugin provides mehtods to crop the image on the client and obtain the\n resulting cropped image as a Data URL or a binary blob to upload it to\n the server.\n \n Check out the plugin in action here http://acornejo.github.io/jquery-cropbox/","readme":"# jquery-cropbox plugin.\n\njQuery plugin for in-place image cropping (zoom & pan, as opposed to select and drag).\n\nThis plugin depends only on jQuery. If either `Hammer.js` or `jquery.hammer.js` is\nloaded, the cropbox plugin will support gestures for panning and zooming\nthe cropbox. Similary, if the `jquery.mousewheel.js` plugin is loaded, then the\ncropbox plugin will support zoom in & out using the mousewheel. All\ndependencies on third party libraries (other than jQuery) are strictly\noptional. Support for CommonJS and AMD loading is built in.\n\nIn browsers that support the HTML5 FIle API and Canvas API, the cropbox\nplugin provides mehtods to crop the image on the client and obtain the\nresulting cropped image as a Data URL or a binary blob to upload it to\nthe server.\n\nCheck out the plugin in action here http://acornejo.github.io/jquery-cropbox/\n\n**History:**\nThis plugin started as a fork of\n[jQcrop](https://github.com/terebentina/jQcrop), and added touch\nsupport, mousewheel support and client resize support through the canvas\napi.\n\n## Usage\n\n```javascript\n\t$('yourimage').cropbox({\n\t    width: 200,\n\t\theight: 200\n\t}).on('cropbox', function(e, data) {\n        console.log('crop window: ' + data);\n\t});\n```\n## Options\n\n<table>\n\t<tr>\n\t\t<th>Option</th>\n\t\t<th>Type</th>\n\t\t<th>Default</th>\n\t\t<th>Required</th>\n\t\t<th>Description</th>\n\t</tr>\n\t<tr>\n\t\t<td>width</td>\n\t\t<td>integer</td>\n\t\t<td>200</td>\n\t\t<td>no</td>\n\t\t<td>Width in pixels of the cropping window</td>\n\t</tr>\n\t<tr>\n\t\t<td>height</td>\n\t\t<td>integer</td>\n\t\t<td>200</td>\n\t\t<td>no</td>\n\t\t<td>Height in pixels of the cropping window</td>\n\t</tr>\n\t<tr>\n\t\t<td>zoom</td>\n\t\t<td>integer</td>\n\t\t<td>10</td>\n\t\t<td>no</td>\n\t\t<td>Number of incremental zoom steps. With the default of 10, you have to click the zoom-in button 9 times to reach 100%.</td>\n\t</tr>\n\t<tr>\n\t\t<td>controls</td>\n\t\t<td>string/jquery</td>\n\t\t<td>null</td>\n\t\t<td>no</td>\n\t\t<td>If not null, this is the entire html block that should appear on hover over the image for instructions and/or buttons (could include the zoom in/out buttons for example). If null, the default html block is used which has the text \"Click to drag\" and the zoom in/out buttons. Use '' (or false) if you don't want anything to appear.</td>\n\t</tr>\n\t<tr>\n\t\t<td>showControls</td>\n\t\t<td>never, always, hover, auto</td>\n\t\t<td>auto</td>\n\t\t<td>no</td>\n\t\t<td>This flag is used to determine when to display the controls. Never, always and hover do exactly what you would expect (never show them, always show them, show them on hover). The auto flag is the same as the hover flag, except that on mobile devices it always shows the controls (since there is no hover event).</td>\n\t</tr>\n</table>\n\n## Methods\n\n<table>\n\t<tr>\n\t\t<th>Name</th>\n\t\t<th>Parameters</th>\n\t\t<th>Description</th>\n\t</tr>\n\t<tr>\n\t\t<td>zoomIn</td>\n\t\t<td>(none)</td>\n\t\t<td>Increase image zoom level by one step</td>\n\t</tr>\n\t<tr>\n\t\t<td>zoomOut</td>\n\t\t<td>(none)</td>\n\t\t<td>Decrease image zoom level by one step</td>\n\t</tr>\n\t<tr>\n\t\t<td>zoom</td>\n\t\t<td>percent</td>\n\t\t<td>Set zoom leevl to a value between 0 and 1. Need to call\n        update to reflect the changes.</td>\n\t</tr>\n\t<tr>\n\t\t<td>drag</td>\n\t\t<td>{startX: integer, startY: integer, dx: integer, dy: integer}</td>\n\t\t<td>Simulate image dragging, starting from (startX,startY) and moving a delta of (dx,dy). Need to call update to reflect the changes.</td>\n\t</tr>\n\t<tr>\n\t\t<td>update</td>\n\t\t<td>(none)</td>\n\t\t<td>Update the cropped result (must call after zoom and drag).</td>\n\t</tr>\n\t<tr>\n\t\t<td>getDataURL</td>\n\t\t<td>(none)</td>\n\t\t<td>Generate a URL for the cropped image on the client (requires HTML5 compliant browser).</td>\n\t</tr>\n\t<tr>\n\t\t<td>getBlob</td>\n\t\t<td>(none)</td>\n\t\t<td>Generate a Blob with the cropped image (requires HTML5 compliant browser).</td>\n\t</tr>\n\t<tr>\n\t\t<td>remove</td>\n\t\t<td>(none)</td>\n\t\t<td>Remove the cropbox functionality from the image.</td>\n\t</tr>\n</table>\n\n## Event\n\nTo get the crop results, bind a function on the `cropbox` event or read the object's result property .\n\n```javascript\n    $('yourimage').cropbox({width: 250, height: 250})\n    .on('cropbox', function (e, result) {\n        console.log(result);\n    });\n```\n\nA reference to the cropbox object can be accessed like so:\n```javascript\n\tvar crop = $('yourimage').data('cropbox');\n\tconsole.log(crop.result);\n```\n\nYou then have access to all the properties and methods used for that specific element.\n","homepage":"https://github.com/acornejo/jquery-cropbox","versions":[{"number":"0.1.3","date":"2013-12-11T19:29:28.803Z"}],"created":"2013-12-11T19:29:27.594Z","modified":"2013-12-11T19:29:28.803Z","lastPublisher":{"name":"acornejo","email":"acornejo@gmail.com"},"owners":[{"name":"acornejo","email":"acornejo@gmail.com"}],"other":{"_attachments":{},"_from":".","_id":"jquery-cropbox","_npmUser":{"name":"acornejo","email":"acornejo@gmail.com"},"_npmVersion":"1.3.14","_rev":"1-27ea93bd98813c833b317d9307a27ecc","author":{"name":"Alex Cornejo"},"bugs":{"url":"https://github.com/acornejo/jquery-cropbox/issues"},"directories":{},"dist-tags":{"latest":"0.1.3"},"dist":{"shasum":"4101f6d67f8e1c2c3f8f43288de523eca10d41f7","tarball":"http://registry.npmjs.org/jquery-cropbox/-/jquery-cropbox-0.1.3.tgz"},"maintainers":[{"name":"acornejo","email":"acornejo@gmail.com"}],"readmeFilename":"README.md","time":{"modified":"2013-12-11T19:29:28.803Z","created":"2013-12-11T19:29:27.594Z","0.1.3":"2013-12-11T19:29:28.803Z"}}}