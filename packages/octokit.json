{"name":"octokit","version":"0.10.4","description":"Javascript github client for nodejs or a web browser using promises","main":"octokit.js","scripts":{"prepublish":"bower install","test":"grunt test --verbose","dist":"grunt dist --verbose","update":"bower update"},"dependencies":{"es6-promise":"~0.1.1","xmlhttprequest":"~1.6.0"},"devDependencies":{"grunt":"~0.4.2","bower":"~1.0","coffee-script":"~1.6.3","docco":"~0.4.0","grunt-coffeelint":"~0.0.7","grunt-bump":"~0.0.10","grunt-contrib-coffee":"~0.7","grunt-contrib-clean":"~0.5","grunt-contrib-watch":"~0.6.1","grunt-mocha-test":"~0.8.0","grunt-mocha-cov":"0.0.7","grunt-blanket-mocha":"git://github.com/philschatz/grunt-blanket-mocha.git#fixes-for-octokit.js","jamjs":"~0.2.17","chai":"~1.8.1","mocha":"~1.14.0","blanket":"~1.1.5"},"repository":"https://github.com/philschatz/octokit.js","keywords":["javascript","github","client","promise","ender"],"jam":{"dependencies":{"jquery":">=1.8","lodash":">=1.0"}},"gitHead":"579cef9893626da93ab8afbd601e4a3cf0d6d278","homepage":"https://github.com/philschatz/octokit.js","versions":[{"number":"0.1.6","date":"2013-07-22T17:49:43.531Z"},{"number":"0.9.0","date":"2013-08-11T18:10:48.859Z"},{"number":"0.9.1","date":"2013-08-11T18:17:29.777Z"},{"number":"0.9.2","date":"2013-08-11T21:53:33.333Z"},{"number":"0.9.3","date":"2013-08-13T03:06:47.644Z"},{"number":"0.9.6","date":"2013-09-05T00:18:27.717Z"},{"number":"0.9.7","date":"2013-09-15T04:12:16.173Z"},{"number":"0.9.8","date":"2013-10-22T19:29:52.390Z"},{"number":"0.9.9","date":"2013-10-30T20:08:05.771Z"},{"number":"0.9.10","date":"2013-12-23T13:49:17.426Z"},{"number":"0.9.11","date":"2014-01-07T22:58:15.408Z"},{"number":"0.9.12","date":"2014-01-09T22:13:26.627Z"},{"number":"0.9.14","date":"2014-01-27T15:06:43.067Z"},{"number":"0.9.16","date":"2014-02-05T14:56:44.457Z"},{"number":"0.9.17","date":"2014-02-08T18:41:19.402Z"},{"number":"0.9.18","date":"2014-03-07T19:13:53.465Z"},{"number":"0.9.19","date":"2014-04-07T03:49:02.398Z"},{"number":"0.9.20","date":"2014-04-19T18:05:54.523Z"},{"number":"0.10.0","date":"2014-05-01T02:03:59.588Z"},{"number":"0.10.1","date":"2014-05-05T15:53:13.227Z"},{"number":"0.10.2","date":"2014-06-29T01:07:28.531Z"},{"number":"0.10.3","date":"2014-09-04T14:25:02.538Z"},{"number":"0.10.4","date":"2014-09-06T21:10:30.770Z"}],"readme":"# octokit.js [![Build Status](https://travis-ci.org/philschatz/octokit.js.png)](https://travis-ci.org/philschatz/octokit.js)\n\noctokit.js provides a minimal higher-level wrapper around git's [plumbing commands](http://git-scm.com/book/en/Git-Internals-Plumbing-and-Porcelain),\nexposing an API for manipulating GitHub repositories, users, groups, and gists.\nIt is being developed in the context of [github-bookeditor](https://github.com/oerpub/github-bookeditor), an EPUB3 editor for GitHub.\n\nThis package can also be used in `nodejs` or as an AMD module in the browser.\n\n## Key Features\n\n- Works in `nodejs`, an AMD module in the browser, and as a [bower](https://github.com/bower/bower) library\n- Simple `read` and `write` methods for text _and_ binary files\n- Creating gists, Pull Requests, forks, and new Repositories\n- `ETag` Caching\n- Promises instead of callbacks (for better error-handling and progress updating)\n- Progress Notifications for multistep operations\n- Starring and Following repositories, users, and organizations\n- Editing Team and Organization Membership\n- User/Org/Repo events and notifications\n- Listeners for rate limit changes\n- Public Keys\n- Hooks (commit, comment, etc)\n\n\n## Usage\n\nAll asynchronous methods return a [Common-JS Promise](http://wiki.commonjs.org/wiki/Promises/A).\n\n### In a browser without requirejs\n\nCreate an Octokit instance.\n\n```js\nvar gh = new Octokit({\n  username: \"USER_NAME\",\n  password: \"PASSWORD\"\n});\n```\n\nOr if you prefer OAuth, it looks like this:\n\n```js\nvar gh = new Octokit({\n  token: \"OAUTH_TOKEN\"\n});\n```\n\n### In a browser using requirejs\n\n```js\ndefine(['octokit'], function(Octokit) {\n  var gh = new Octokit({\n    username: \"YOU_USER\",\n    password: \"YOUR_PASSWORD\"\n  });\n});\n```\n\n### In NodeJS\n\nInstall instructions:\n\n    npm install octokit --save\n\n```js\nvar Octokit = require('octokit');\nvar gh = Octokit.new({\n  username: \"YOU_USER\",\n  password: \"YOUR_PASSWORD\"\n});\n```\n\n### Using Generators in NodeJS 0.11 (or EcmaScript 6 browsers)\n\nThis requires NodeJS 0.11 with the `--harmony-generators` flag:\n\n```js\nvar co = require('co');\nvar Octokit = require('octokit');\nvar gh = Octokit.new();\n\nvar fn = function *() {\n  var zen  = yield gh.getZen();\n  var info = yield gh.getRepo('philschatz', 'octokit.js').getInfo();\n\n  console.log(zen);\n  console.log(info);\n};\n\nco(fn)();\n```\n\n### Using bower\n\nThis file can be included using the bower package manager:\n\n    bower install octokit --save\n\n## Development\n\nMocha tests are run on NodeJS by running `npm test`. Mocha tests in the browser and code coverage are run by going to [./test/index.html](http://philschatz.github.io/octokit.js/test).\n\n\n## Repository API\n\n\n```js\nvar repo = gh.getRepo(username, reponame);\n```\n\nShow repository information\n\n```js\nrepo.getInfo()\n.then(function(repo) {})\n```\n\nList all branches in a Repository\n\n```js\nrepo.getBranches()\n.then(function(branches) {});\n```\n\nFork a repository\n\n```js\nrepo.fork()\n.then(function() {});\n```\n\nCreate a Pull Request\n\n```js\nrepo.createPullRequest()\n.then(function() {});\n```\n\nGet recent commits to the repository\n\n```js\nvar options = {};\nrepo.getCommits(options)\n.then(function(commits) {});\n```\n\nList Repository events\n\n```js\nrepo.getEvents()\n.then(function(events) {});\n```\n\nList Issue events for the repository\n\n```js\nrepo.getIssueEvents()\n.then(function(events) {});\n```\n\nList events for a network of Repositories\n\n```js\nrepo.getNetworkEvents()\n.then(function(events) {});\n```\n\nList unread notifications for authenticated user pertaining to this repository\n\n```js\nvar options = {};\nrepo.getNotifications(options)\n.then(function(events) {});\n```\n\nGet programming language counts (CoffeeScript, Ruby, Shell)\n\n```js\nrepo.getLanguages()\n.then(function(events) {});\n```\n\nGet releases\n```js\nrepo.getReleases()\n.then(function(releases) {});\n```\n\n### Branch API\n\nAdditional methods are available for a specific branch in a repository\n\nGet the Default branch of a repository\n\n```js\nvar branch = repo.getBranch();\n```\n\nGet a specific branch of a repository\n\n```js\nvar branch = repo.getBranch(\"BRANCH_NAME\");\n```\n\nRead a file from the branch\n\n```js\nvar isBinary = false;\nbranch.read('PATH/TO/FILE.txt', isBinary)\n.then(function(contents) {})\n```\n\nRemove a file from the branch\n\n```js\nvar message = \"OPTIONAL COMMIT MESSAGE\";\nbranch.remove('PATH/TO/FILE.txt', message)\n.then(function() {});\n```\n\nRead the contents (raw) of a file or directory\n\n```js\nbranch.contents('DIRECTORY/PATH')\n.then(function(contents) {});\n```\n\nor\n\n```js\nbranch.contents('DIRECTORY/PATH/FILE.txt')\n.then(function(contents) {});\n```\n\nMove a file\n\n```js\nvar message = \"OPTIONAL COMMIT MESSAGE\";\nbranch.move('PATH/TO/FILE.txt', 'NEW/PATH/TO/FILE.txt', message)\n.then(function() {});\n```\n\nWrite a file (update or add)\n\n```js\nvar content = \"Contents of the file\";\nvar message = \"OPTIONAL COMMIT MESSAGE\";\nvar isBinary = false;\nbranch.write('PATH/TO/FILE.txt', content, message, isBinary)\n.then(function() {});\n```\n\nWrite multiple files (update or add) in one commit\n\n```js\nvar contents = {\n  \"FILE1.txt\": \"Contents of the file\",\n  \"FILE2.txt\": {isBase64: true, content: \"BASE_64_ENCODED_STRING\"}\n}\nbranch.writeMany(contents, message)\n.then(function() {});\n```\n\nGet recent commits to a branch\n\n```js\nvar options = {};\nbranch.getCommits(options)\n.then(function(commits) {});\n```\n\nCreate a new branch\n\n```js\nbranch.createBranch(\"new-branch-name\")\n.then(function() {});\n```\n\n\n### Low-level Repo API\n\nThe methods on a branch or repo use the following low-level methods.\n\n```js\nrepo.git.getRef(...)      .then(function(result) {});\nrepo.git.createRef(...)   .then(function(result) {});\nrepo.git.deleteRef(...)   .then(function(result) {});\nrepo.git.getBranches()    .then(function(result) {});\nrepo.git.getBlob(...)     .then(function(result) {});\nrepo.git.getSha(...)      .then(function(result) {});\nrepo.git.getTree(...)     .then(function(result) {});\nrepo.git.postBlob(...)    .then(function(result) {});\nrepo.git.updateTree(...)  .then(function(result) {});\nrepo.git.postTree(...)    .then(function(result) {});\nrepo.git.commit(...)      .then(function(result) {});\nrepo.git.updateHead(...)  .then(function(result) {});\nrepo.git.getCommits(...)  .then(function(result) {});\n```\n\n\n## User API\n\n\n```js\nvar user = gh.getUser(GITHUB_USERNAME);\n```\n\nShow user information for a particular user. Also works for organizations.\n\n```js\nuser.getInfo()\n.then(function(user) {})\n```\n\nList public repositories for a particular user.\n_options described [here](http://developer.github.com/v3/repos/#list-user-repositories)_\n\n```js\nuser.getRepos(type='all', sort='pushed', direction='desc')\n.then(function(repos) {});\n```\n\nList organizations the user is in.\n\n```js\nuser.getOrgs()\n.then(function(orgs) {});\n```\n\nList all gists of a particular user.\n\n```js\nuser.getGists()\n.then(function(gists) {});\n```\n\nList users following this user.\n\n```js\nuser.getFollowers()\n.then(function(users) {});\n```\n\nList users this user is following.\n\n```js\nuser.getFollowing()\n.then(function(users) {});\n```\n\nGet Received events for this user.\n\n```js\nuser.getReceivedEvents()\n.then(function(events) {});\n```\n\nGet all events for this user.\n\n```js\nuser.getEvents()\n.then(function(events) {});\n```\n\n\n## Authenticated User API\n\nThe Authenticated User contains the following methods in addition to all the methods in the **User API**.\n\nGet the authenticated user.\n\n```js\nvar user = gh.getUser();\n```\n\nList unread notifications for the user.\n\n```js\ngh.getNotifications()\n.then(function(notifications) {})\n```\n\nList private and public repositories of the current authenticated user.\n\n```js\nuser.getRepos()\n.then(function(repos) {});\n```\n\nFollow another user.\n\n```js\nuser.follow(\"OTHER_USERNAME\")\n.then(function(orgs) {});\n```\n\nStop following another user.\n\n```js\nuser.unfollow(\"OTHER_USERNAME\")\n.then(function(orgs) {});\n```\n\n\n## Gist API\n\n```js\nvar gist = gh.getGist(3165654);\n```\n\nRead the contents of a Gist.\n\n```js\ngist.read()\n.then(function(gist) {});\n```\n\nUpdate the contents of a Gist. Please consult the documentation on [GitHub](http://developer.github.com/v3/gists/).\n\n```js\nvar delta = {\n  \"description\": \"the description for this gist\",\n  \"files\": {\n    \"file1.txt\": {\n      \"content\": \"updated file contents\"\n    },\n    \"old_name.txt\": {\n      \"filename\": \"new_name.txt\",\n      \"content\": \"modified contents\"\n    },\n    \"new_file.txt\": {\n      \"content\": \"a new file\"\n    },\n    \"delete_this_file.txt\": null\n  }\n};\n\ngist.update(delta)\n.then(function(gist) {});\n```\n\nCreate a Gist\n\n```js\nvar files = {\n  'file1.txt': {content: 'String file contents'}\n};\n\ngh.getGist().create(files)\n.then(function(gist) {});\n```\n\nDelete the Gist\n\n```js\ngist.delete()\n.then(function(gist) {});\n```\n\nFork the Gist\n\n```js\ngist.fork()\n.then(function(gist) {});\n```\n\nStar the Gist\n\n```js\ngist.star()\n.then(function() {});\n```\n\nUnstar the Gist\n\n```js\ngist.unstar()\n.then(function() {});\n```\n\nCheck if the Gist is starred\n\n```js\ngist.isStarred()\n.then(function() {});\n```\n\n\n## Miscellaneous methods\n\nRetreive a zen message (to test the API works).\n\n```js\ngh.getZen()\n.then(function(msg) {});\n```\n\nAdd a listener for `rateLimit` changes\n\n```js\nfunction listener(rateLimitRemaining, rateLimit, method, path, data, raw, isBase64) {\n  // ...\n};\ngh.onRateLimitChanged(listener);\n```\n\nList repositories for a particular organization. Includes private repositories if you are authorized.\n\n```js\ngh.getOrgRepos(orgname)\n.then(function(repos) {});\n```\n\n## Progress Notifications\n\nFor multistep operations users can listen to updates by registering a listener at `promise.progress(function(obj) {})`.\n\n\n\n## Setup\n\n`octokit.js` has the following dependencies when used in a browser:\n\n- A Promise API (supports jQuery, AngularJS, or a Promise Polyfill)\n\nIf you are already using [jQuery](https://api.jquery.com/jQuery.Deferred/) or [AngularJS](https://docs.angularjs.org/api/ng/service/$q) in your project just be sure to include them before octokit and it will\nuse their Promise API.\n\nOtherwise, you can include a Promise polyfill like [jakearchibald/es6-promise](https://github.com/jakearchibald/es6-promise):\n\n```\n<script src=\"./node_modules/es6-promise/dist/promise-0.1.1.js\"></script>\n<script src=\"./octokit.js\">\n```\n\n## Change Log\n\n\n### 0.7.X\n\nSwitched to a native `request` implementation (thanks @mattpass). Adds support for GitHub gists, forks and pull requests.\n\n### 0.6.X\n\nAdds support for organizations and fixes an encoding issue.\n\n### 0.5.X\n\nSmart caching of latest commit sha.\n\n### 0.4.X\n\nAdded support for [OAuth](http://developer.github.com/v3/oauth/).\n\n### 0.3.X\n\nSupport for Moving and removing files.\n\n### 0.2.X\n\nConsider commit messages.\n\n### 0.1.X\n\nInitial version.\n","starsCount":3,"created":"2013-07-22T17:49:41.061Z","modified":"2017-02-09T15:37:57.675Z","lastPublisher":{"name":"philschatz","email":"phil@cnx.org"},"owners":[{"name":"philschatz","email":"phil@cnx.org"}],"other":{"_attachments":{},"_from":".","_id":"octokit","_npmUser":{"name":"philschatz","email":"phil@cnx.org"},"_npmVersion":"2.0.0-alpha-5","_rev":"2-6b9b5a514cf8afd841e2d26377bf0d7e","_shasum":"bed854d89c461062ad5c56cbe186784eeeb5a4eb","author":{"name":"Philip Schatz"},"bugs":{"url":"https://github.com/philschatz/octokit.js/issues"},"directories":{},"dist-tags":{"latest":"0.10.4"},"dist":{"shasum":"bed854d89c461062ad5c56cbe186784eeeb5a4eb","tarball":"http://registry.npmjs.org/octokit/-/octokit-0.10.4.tgz"},"maintainers":[{"name":"philschatz","email":"phil@cnx.org"}],"readmeFilename":"README.md","time":{"modified":"2017-02-09T15:37:57.675Z","created":"2013-07-22T17:49:41.061Z","0.1.6":"2013-07-22T17:49:43.531Z","0.9.0":"2013-08-11T18:10:48.859Z","0.9.1":"2013-08-11T18:17:29.777Z","0.9.2":"2013-08-11T21:53:33.333Z","0.9.3":"2013-08-13T03:06:47.644Z","0.9.6":"2013-09-05T00:18:27.717Z","0.9.7":"2013-09-15T04:12:16.173Z","0.9.8":"2013-10-22T19:29:52.390Z","0.9.9":"2013-10-30T20:08:05.771Z","0.9.10":"2013-12-23T13:49:17.426Z","0.9.11":"2014-01-07T22:58:15.408Z","0.9.12":"2014-01-09T22:13:26.627Z","0.9.14":"2014-01-27T15:06:43.067Z","0.9.16":"2014-02-05T14:56:44.457Z","0.9.17":"2014-02-08T18:41:19.402Z","0.9.18":"2014-03-07T19:13:53.465Z","0.9.19":"2014-04-07T03:49:02.398Z","0.9.20":"2014-04-19T18:05:54.523Z","0.10.0":"2014-05-01T02:03:59.588Z","0.10.1":"2014-05-05T15:53:13.227Z","0.10.2":"2014-06-29T01:07:28.531Z","0.10.3":"2014-09-04T14:25:02.538Z","0.10.4":"2014-09-06T21:10:30.770Z"},"users":{"rchk":true,"marcellk":true,"danielbayley":true}}}