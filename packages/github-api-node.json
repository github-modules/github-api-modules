{"name":"github-api-node","version":"0.11.2","description":"A higher-level wrapper around the Github API.","main":"src/github.js","dependencies":{"axios":"git+https://github.com/github-tools/axios.git","base-64":"^0.1.0","es6-promise":"^3.0.2","utf8":"^2.1.1"},"devDependencies":{"browserify":"^13.0.0","browserify-istanbul":"^0.2.1","chai":"^3.4.1","codecov":"^1.0.1","del":"^2.2.0","gulp":"^3.9.0","gulp-jscs":"^3.0.2","gulp-jscs-stylish":"^1.3.0","gulp-jshint":"^2.0.0","gulp-rename":"^1.2.2","gulp-sourcemaps":"^1.6.0","gulp-uglify":"^1.5.1","istanbul":"^0.4.2","jshint":"^2.9.1","jshint-stylish":"^2.1.0","karma":"^0.13.19","karma-browserify":"^4.4.2","karma-chai":"^0.1.0","karma-coverage":"^0.5.3","karma-json-fixtures-preprocessor":"0.0.6","karma-mocha":"^0.2.1","karma-mocha-reporter":"^1.1.5","karma-phantomjs-launcher":"^0.2.3","karma-sauce-launcher":"^0.3.0","mocha":"^2.3.4","vinyl-buffer":"^1.0.0","vinyl-source-stream":"^1.1.0"},"scripts":{"test":"gulp test && gulp lint","lint":"gulp lint","codecov":"cat coverage/*/lcov.info | codecov"},"repository":"https://github.com/michael/github","keywords":["github","api"],"license":"BSD-3-Clause-Clear","gitHead":"aa8aa3c8cd5ce5240373d4fd1d06a7ab4af41a36","homepage":"https://github.com/michael/github#readme","versions":[{"number":"0.11.2","date":"2016-02-16T07:25:14.215Z"}],"readme":"# Github.js\r\n\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/michael/github?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![Stories in Ready](https://badge.waffle.io/michael/github.png?label=ready&title=Ready)](https://waffle.io/michael/github) [![Build Status](https://travis-ci.org/michael/github.svg?branch=master)](https://travis-ci.org/michael/github) [![codecov.io](https://codecov.io/github/michael/github/coverage.svg?branch=master)](https://codecov.io/github/michael/github?branch=master)\r\n\r\nGithub.js provides a minimal higher-level wrapper around git's [plumbing commands](http://git-scm.com/book/en/Git-Internals-Plumbing-and-Porcelain), exposing an API for manipulating GitHub repositories on the file level. It was formerly developed in the context of [Prose](http://prose.io), a content editor for GitHub.\r\n\r\n## Installation\r\n\r\nEither grab `github.js` from this repo or install Github.js via npm:\r\n\r\n```\r\nnpm install github-api\r\n```\r\n\r\nAlternatively, you can install the library using Bower:\r\n\r\n```\r\nbower install github-api\r\n```\r\n\r\n##Â Compatibility\r\n\r\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/githubjs.svg)](https://saucelabs.com/u/githubjs)\r\n\r\n**Note**: Starting from version 0.10.8, Github.js supports **Internet Explorer 9**. However, the underlying \r\nmethodology used under the hood to perform CORS requests (the `XDomainRequest` object),\r\n[has limitations](http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx).\r\nIn particular, requests must be targeted to the same scheme as the hosting page. This means that if a page is at \r\nhttp://example.com, your target URL must also begin with HTTP. Similarly, if your page is at https://example.com, then\r\nyour target URL must also begin with HTTPS. For this reason, if your requests are sent to the GitHub API (the default), \r\nwhich are served via HTTPS, your page must use HTTPS too.\r\n\r\n## GitHub Tools\r\n\r\nThe team behind Github.js has created a whole organization, called [GitHub Tools](https://github.com/github-tools),\r\ndedicated to GitHub and its API. In the near future this repository could be moved under the GitHub Tools organization\r\nas well. In the meantime, we recommend you to take a look at other projects of the organization.\r\n\r\n## Usage\r\n\r\nCreate a Github instance.\r\n\r\n```js\r\nvar github = new Github({\r\n  username: \"YOU_USER\",\r\n  password: \"YOUR_PASSWORD\",\r\n  auth: \"basic\"\r\n});\r\n```\r\n\r\nOr if you prefer OAuth, it looks like this:\r\n\r\n```js\r\nvar github = new Github({\r\n  token: \"OAUTH_TOKEN\",\r\n  auth: \"oauth\"\r\n});\r\n```\r\n\r\nYou can use either:\r\n* Authorised App Tokens (via client/secret pairs), used for bigger applications, created in web-flows/on the fly\r\n* Personal Access Tokens (simpler to set up), used on command lines, scripts etc, created in GitHub web UI\r\n\r\nSee these pages for more info:\r\n\r\n[Creating an access token for command-line use](https://help.github.com/articles/creating-an-access-token-for-command-line-use)\r\n\r\n[Github API OAuth Overview](http://developer.github.com/v3/oauth)\r\n\r\nEnterprise Github instances may be specified using the `apiUrl` option:\r\n\r\n```js\r\nvar github = new Github({\r\n  apiUrl: \"https://serverName/api/v3\",\r\n  ...\r\n});\r\n```\r\n\r\n## Repository API\r\n\r\n\r\n```js\r\nvar repo = github.getRepo(username, reponame);\r\n```\r\n\r\nShow repository information\r\n\r\n```js\r\nrepo.show(function(err, repo) {});\r\n```\r\n\r\nDelete a repository\r\n\r\n```js\r\nrepo.deleteRepo(function(err, res) {});\r\n```\r\n\r\nGet contents at a particular path in a particular branch.\r\n\r\n```js\r\nrepo.contents(branch, \"path/to/dir\", function(err, contents) {});\r\n```\r\n\r\nFork repository. This operation runs asynchronously. You may want to poll for `repo.contents` until the forked repo is ready.\r\n\r\n```js\r\nrepo.fork(function(err) {});\r\n```\r\n\r\nList forks.\r\n\r\n```js\r\nrepo.listForks(function(err, forks) {});\r\n```\r\n\r\nCreate new branch for repo. You can omit oldBranchName to default to \"master\".\r\n\r\n```js\r\nrepo.branch(oldBranchName, newBranchName, function(err) {});\r\n```\r\n\r\nList Pull Requests.\r\n\r\n```js\r\nvar state = 'open'; //or 'closed', or 'all'\r\nrepo.listPulls(state, function(err, pullRequests) {});\r\n```\r\n\r\nGet details of a Pull Request.\r\n\r\n```js\r\nvar pullRequestID = 123;\r\nrepo.getPull(pullRequestID, function(err, pullRequestInfo) {});\r\n```\r\n\r\nCreate Pull Request.\r\n\r\n```js\r\nvar pull = {\r\n  title: message,\r\n  body: \"This pull request has been automatically generated by Prose.io.\",\r\n  base: \"gh-pages\",\r\n  head: \"michael\" + \":\" + \"prose-patch\"\r\n};\r\nrepo.createPullRequest(pull, function(err, pullRequest) {});\r\n```\r\n\r\nRetrieve all available branches (aka heads) of a repository.\r\n\r\n```js\r\nrepo.listBranches(function(err, branches) {});\r\n```\r\n\r\nGet list of statuses for a particular commit.\r\n\r\n```js\r\nrepo.getStatuses(sha, function(err, statuses) {});\r\n```\r\n\r\nStore content at a certain path. If the file specified in the path exists, the content is updated. If the file doesn't exist, it's created on the fly. You can also provide an optional object literal, (`options` in the example below) containing information about the author and the committer.\r\n\r\n```js\r\nvar options = {\r\n  author: {name: 'Author Name', email: 'author@example.com'},\r\n  committer: {name: 'Committer Name', email: 'committer@example.com'},\r\n  encode: true // Whether to base64 encode the file. (default: true)\r\n}\r\nrepo.write('master', 'path/to/file', 'YOUR_NEW_CONTENTS', 'YOUR_COMMIT_MESSAGE', options, function(err) {});\r\n```\r\n\r\nNot only can you can write files, you can of course read them.\r\n\r\n```js\r\nrepo.read('master', 'path/to/file', function(err, data) {});\r\n```\r\n\r\nMove a file from A to B.\r\n\r\n```js\r\nrepo.move('master', 'path/to/file', 'path/to/new_file', function(err) {});\r\n```\r\n\r\nRemove a file.\r\n\r\n```js\r\nrepo.remove('master', 'path/to/file', function(err) {});\r\n```\r\n\r\nGet information about a particular commit.\r\n\r\n```js\r\nrepo.getCommit('master', sha, function(err, commit) {});\r\n```\r\n\r\nExploring files of a repository is easy too by accessing the top level tree object.\r\n\r\n```js\r\nrepo.getTree('master', function(err, tree) {});\r\n```\r\n\r\nIf you want to access all blobs and trees recursively, you can add `?recursive=true`.\r\n\r\n```js\r\nrepo.getTree('master?recursive=true', function(err, tree) {});\r\n```\r\n\r\nGiven a filepath, retrieve the reference blob or tree sha.\r\n\r\n```js\r\nrepo.getSha('master', '/path/to/file', function(err, sha) {});\r\n```\r\n\r\nFor a given reference, get the corresponding commit sha.\r\n\r\n```js\r\nrepo.getRef('heads/master', function(err, sha) {});\r\n```\r\n\r\nCreate a new reference.\r\n\r\n```js\r\nvar refSpec = {\r\n  \"ref\": \"refs/heads/my-new-branch-name\",\r\n  \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\r\n};\r\nrepo.createRef(refSpec, function(err) {});\r\n```\r\n\r\nDelete a reference.\r\n\r\n```js\r\nrepo.deleteRef('heads/gh-pages', function(err) {});\r\n```\r\n\r\nGet contributors list with additions, deletions, and commit counts.\r\n\r\n```js\r\nrepo.contributors(function(err, data) {});\r\n```\r\n\r\nCheck if a repository is starred.\r\n\r\n```js\r\nrepo.isStarred(owner, repository, function(err) {});\r\n```\r\n\r\nStar a repository.\r\n\r\n```js\r\nrepo.star(owner, repository, function(err) {});\r\n```\r\n\r\nUnstar a repository.\r\n\r\n```js\r\nrepo.unstar(owner, repository, function(err) {});\r\n```\r\n\r\n## User API\r\n\r\n\r\n```js\r\nvar user = github.getUser();\r\n```\r\n\r\nList repositories of the authenticated user, including private repositories and repositories in which the user is a collaborator and not an owner.\r\n\r\n```js\r\nuser.repos(options, function(err, repos) {});\r\n```\r\n\r\nList organizations the authenticated user belongs to.\r\n\r\n```js\r\nuser.orgs(function(err, orgs) {});\r\n```\r\n\r\nList authenticated user's gists.\r\n\r\n```js\r\nuser.gists(function(err, gists) {});\r\n```\r\n\r\nList unread notifications for the authenticated user.\r\n\r\n```js\r\nuser.notifications(options, function(err, notifications) {});\r\n```\r\n\r\nShow user information for a particular username. Also works for organizations. Pass in a falsy value (null, '', etc) for 'username' to retrieve user information for the currently authorized user.\r\n\r\n```js\r\nuser.show(username, function(err, user) {});\r\n```\r\n\r\nList public repositories for a particular user.\r\n\r\n```js\r\nuser.userRepos(username, function(err, repos) {});\r\n```\r\n\r\nList starred repositories for a particular user.\r\n\r\n```js\r\nuser.userStarred(username, function(err, repos) {});\r\n```\r\n\r\nCreate a new repo for the authenticated user\r\n\r\n```js\r\nuser.createRepo({\"name\": \"test\"}, function(err, res) {});\r\n```\r\nRepo description, homepage, private/public can also be set.\r\nFor a full list of options see the docs [here](https://developer.github.com/v3/repos/#create)\r\n\r\n\r\nList repositories for a particular organization. Includes private repositories if you are authorized.\r\n\r\n```js\r\nuser.orgRepos(orgname, function(err, repos) {});\r\n```\r\n\r\nList all gists of a particular user. If username is ommitted gists of the current authenticated user are returned.\r\n\r\n```js\r\nuser.userGists(username, function(err, gists) {});\r\n```\r\n\r\n## Gist API\r\n\r\n```js\r\nvar gist = github.getGist(3165654);\r\n```\r\n\r\nRead the contents of a Gist.\r\n\r\n```js\r\ngist.read(function(err, gist) {\r\n\r\n});\r\n```\r\n\r\nUpdating the contents of a Gist. Please consult the documentation on [GitHub](http://developer.github.com/v3/gists/).\r\n\r\n```js\r\nvar delta = {\r\n  \"description\": \"the description for this gist\",\r\n  \"files\": {\r\n    \"file1.txt\": {\r\n      \"content\": \"updated file contents\"\r\n    },\r\n    \"old_name.txt\": {\r\n      \"filename\": \"new_name.txt\",\r\n      \"content\": \"modified contents\"\r\n    },\r\n    \"new_file.txt\": {\r\n      \"content\": \"a new file\"\r\n    },\r\n    \"delete_this_file.txt\": null\r\n  }\r\n};\r\n\r\ngist.update(delta, function(err, gist) {\r\n\r\n});\r\n```\r\n## Issues API\r\n\r\n```js\r\nvar issues = github.getIssues(username, reponame);\r\n```\r\n\r\nTo read all the issues of a given repository\r\n\r\n```js\r\nissues.list(options, function(err, issues) {});\r\n```\r\n\r\nTo comment in a issue\r\n\r\n```js\r\nissues.comment(issue, comment,function(err, comment) {});\r\n```\r\n\r\n## Search API\r\n\r\n```js\r\nvar search = github.getSearch(query);\r\n```\r\n\r\n### Search repositories\r\n\r\nSuppose you want to search for popular Tetris repositories written in Assembly. Your query might look like this:\r\n\r\n```js\r\nvar search = github.getSearch(\"tetris+language:assembly&sort=stars&order=desc\");\r\nsearch.repositories(options, function (err, repositories) {});\r\n```\r\n\r\n### Search code\r\n\r\nSuppose you want to find the definition of the addClass function inside jQuery. Your query would look something like this:\r\n\r\n```js\r\nvar search = github.getSearch(\"addClass+in:file+language:js+repo:jquery/jquery\");\r\nsearch.code(options, function (err, codes) {});\r\n```\r\n\r\n### Search issues\r\n\r\nLetâs say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this:\r\n\r\n```js\r\nvar search = github.getSearch(\"windows+label:bug+language:python+state:open&sort=created&order=asc\");\r\nsearch.issues(options, function (err, issues) {});\r\n```\r\n\r\n### Search users\r\n\r\nImagine youâre looking for a list of popular users. You might try out this query:\r\n\r\n```js\r\nvar search = github.getSearch(\"tom+repos:%3E42+followers:%3E1000\");\r\nsearch.users(options, function (err, users) {});\r\n```\r\n\r\nHere, weâre looking at users with the name Tom. Weâre only interested in those with more than 42 repositories, and only if they have over 1,000 followers.\r\n\r\n\r\n## Change Log\r\n\r\n### 0.10.X\r\n\r\nCreate and delete repositories\r\nRepos - getCommit\r\n\r\n### 0.9.X\r\n\r\nPaging (introduced at tail end of 0.8.X, note: different callbacks for success & errors now)\r\n\r\n### 0.8.X\r\n\r\nFixes and tweaks, simpler auth, CI tests, node.js support, Raw+JSON, UTF8, plus:\r\nUsers - follow, unfollow, get info, notifications\r\nGists - create\r\nIssues - get\r\nRepos - createRepo, deleteRepo, createBranch, star, unstar, isStarred, getCommits, listTags, listPulls, getPull, compare\r\nHooks - listHooks, getHook, createHook, editHook, deleteHook\r\n\r\n### 0.7.X\r\n\r\nSwitched to a native `request` implementation (thanks @mattpass). Adds support for GitHub gists, forks and pull requests.\r\n\r\n### 0.6.X\r\n\r\nAdds support for organizations and fixes an encoding issue.\r\n\r\n### 0.5.X\r\n\r\nSmart caching of latest commit sha.\r\n\r\n### 0.4.X\r\n\r\nAdded support for [OAuth](http://developer.github.com/v3/oauth/).\r\n\r\n### 0.3.X\r\n\r\nSupport for Moving and removing files.\r\n\r\n### 0.2.X\r\n\r\nConsider commit messages.\r\n\r\n### 0.1.X\r\n\r\nInitial version.\r\n","starsCount":2,"created":"2016-02-16T07:25:14.215Z","modified":"2016-10-04T10:40:01.574Z","lastPublisher":{"name":"harrisonhjones","email":"harrison@hhj.me"},"owners":[{"name":"harrisonhjones","email":"harrison@hhj.me"}],"other":{"_attachments":{},"_from":".","_id":"github-api-node","_nodeVersion":"0.12.9","_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/github-api-node-0.11.2.tgz_1455607512300_0.8792916107922792"},"_npmUser":{"name":"harrisonhjones","email":"harrison@hhj.me"},"_npmVersion":"2.14.9","_rev":"1-7783d0909a1279deae4034bffe347dab","_shasum":"86168135ea4f2c2666432fb70b48d186155dae7f","bugs":{"url":"https://github.com/michael/github/issues"},"contributors":[{"name":"Ãndrew Rininsland","email":"aendrew.rininsland@thetimes.co.uk","url":"http://www.aendrew.com"},{"name":"Aurelio De Rosa","email":"a.derosa@audero.it","url":"http://www.audero.it/"},{"name":"Michael Aufreiter","url":"http://substance.io"}],"directories":{},"dist-tags":{"latest":"0.11.2"},"dist":{"shasum":"86168135ea4f2c2666432fb70b48d186155dae7f","tarball":"http://registry.npmjs.org/github-api-node/-/github-api-node-0.11.2.tgz"},"maintainers":[{"name":"harrisonhjones","email":"harrison@hhj.me"}],"readmeFilename":"README.md","time":{"modified":"2016-10-04T10:40:01.574Z","created":"2016-02-16T07:25:14.215Z","0.11.2":"2016-02-16T07:25:14.215Z"},"users":{"fstgeorge":true,"elhanarinc":true}}}