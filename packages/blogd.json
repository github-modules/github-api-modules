{"name":"blogd","description":"Node Server providing an API to expose blog data from a formated github repository","version":"0.2.5","licenses":[{"type":"MIT","url":"https://raw.githubusercontent.com/Elao/blogd/master/LICENSE"}],"homepage":"https://github.com/Elao/blogd","repository":"https://github.com/Elao/blogd","keywords":["blog","blogd","elao","api","github","repository","git","zip"],"main":"app.js","bin":{"blogd":"./app.js"},"dependencies":{"adm-zip":"^0.4.4","bluebird":"^2.3.6","body-parser":"^1.9.0","express":"4.x.x","glob":"^4.0.6","highlight.js":"^8.2.0","http-auth":"^2.1.9","jsonfile":"^2.0.0","lodash":"^2.4.1","marked":"^0.3.2","moment":"^2.8.3","ncp":"^1.0.1","nodegit":"^0.1.4","request":"^2.4.1","rest-framework":"0.2.6","rimraf":"^2.2.8","unzip":"^0.1.11"},"gitHead":"dfdf4e567397d5cc32f67de8def4c1ed84c604f9","scripts":{},"versions":[{"number":"0.1.0","date":"2014-10-20T13:55:49.219Z"},{"number":"0.1.1","date":"2014-10-20T14:16:27.235Z"},{"number":"0.1.2","date":"2014-10-20T14:24:02.423Z"},{"number":"0.1.3","date":"2014-10-20T15:00:24.759Z"},{"number":"0.1.4","date":"2014-10-20T15:32:27.516Z"},{"number":"0.1.5","date":"2014-10-21T12:01:56.090Z"},{"number":"0.1.6","date":"2014-10-22T07:43:42.781Z"},{"number":"0.1.7","date":"2014-10-22T08:21:34.832Z"},{"number":"0.1.8","date":"2014-10-22T08:53:11.977Z"},{"number":"0.2.0","date":"2014-10-23T09:58:41.630Z"},{"number":"0.2.1","date":"2014-10-23T13:29:05.002Z"},{"number":"0.2.2","date":"2014-10-29T13:31:55.896Z"},{"number":"0.2.3","date":"2014-10-29T14:35:18.729Z"},{"number":"0.2.4","date":"2014-11-03T09:52:17.321Z"},{"number":"0.2.5","date":"2014-11-04T09:28:39.520Z"}],"readme":"Blogd\n=====\n\nBlogd allow you to retrieve blog's posts and meta from a folder, a git repository or a remote zip and expose them via an API. It's useful when you want to manage a collaborative blog with github for example. Blogd is maintained by [http://www.elao.com](Elao) and is use at [http://www.elao.com/blog](). The content repository of the blog is located at [http://www.github.com/elao/tech-blog]().\n\n\n# Configuration\n\nAdd a *config.js* file (copy / past the config.js.dist for example). Or you can also define a *blogd* config key in your *package.json* file (or in *../../package.json* file).\n\nExample of _config.js_  file\n\n    'use strict';\n\n    exports.port          = process.env.PORT || 5555;\n    exports.host \t\t = '127.0.0.1';\n    exports.store         = 'memory'; // or memory\n    exports.outputFolder  = __dirname + \"/content\";\n    exports.backupFile    = __dirname + \"/current.json\";\n    exports.assetsToCopy  = [{\n        from: exports.outputFolder + \"/posts/images/\",\n        to:   __dirname + \"/public/images\",\n        url: \"/images/\"\n    }];\n\n    exports.security = {\n        rules: {\n            guest:  {},\n            admin:  {}\n        },\n        basic: {\n            realm:    'Blogd Private Api',\n            user:     'admin',\n            password: 'private'\n        }\n    };\n\n    exports.source = {\n        type:        'zip',\n        url:         'https://github.com/Elao/tech-blog/archive/master.zip'\n    }\n\nAvailable configuration options:\n\n<table>\n\t<tr><th>key</th><th>default</th><th>description</th></tr>\n\t<tr><td>host</td><td>'127.0.0.1'</td><td>Binded host</td></tr>\n\t<tr><td>port</td><td>5555</td><td>Binded port</td></tr>\n\t<tr><td>store</td><td>'memory'</td><td>The store to use to store the blog data (only 'memory' is supported now)</td><tr>\n\t<tr><td>outputFolder</td><td>'./content'</td><td>The folder where to dump the grabbed content</td></tr>\n\t<tr><td>backupFile</td><td>'./current.json'</td><td>Path of the file where consolidated json data should be backed up</td></tr>\n\t<tr>\n\t\t<td>assetsToCopy</td>\n\t\t<td>[]</td>\n\t\t<td>\n\t\t\tarray of folder to copy and/or map.<br /> \n\t\t\tThe object should contains: <br />\n\t\t\t<ul>\n\t\t\t\t<li>__from__ : The folder to copy (*required*)</li>\n\t\t\t\t<li>__to__ : The destination folder (*required*)</li>\n\t\t\t\t<li>__url__ : The absolute url to bind the folder (if none, it'll not be mapped)</li>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td>source</td>\n\t\t<td>no default.</td>\n\t\t<td>\n\t\t\tWhere to find the content.\n\t\t\t<ul>\n\t\t\t\t<li> __type__ : The type of source (folder, git, zip)</li>\n\t\t\t\t<li> __url__ : The url of the zip file (for the *type zip*)</li>\n\t\t\t\t<li> __folder__ : The folder to get data from (for the *type folder*)</li>\n\t\t\t\t<li> __repository__ : The url of the git repository (for the *type git*)</li>\n\t\t\t</ul>\n\t\t</td>\n\t</tr>\n</table>\n\n\n# API\n\n<table>\n\t<tr><th>Method</th><th>Route</th><th>Params</th><th>Description</th><tr>\n\t<tr><td>GET</td><td>/posts</td><td><em>limit</em> The number of posts to retrieve<br /><em>offset</em> The offset<br /><em>status</em> Filter by post status</td><td>Retrieve list of blog's post ordered by publish date desc</td></tr>\n\t<tr><td>GET</td><td>/posts/:tag</td><td>tag: a tag<br /><em>limit</em> The number of posts to retrieve<br /><em>offset</em> The offset<br /><em>status</em> Filter by post status</td><td>Retrive list of blog's post by tag</td></tr>\n\t<tr><td>GET</td><td>/post/:slug</td><td>slug: a post's slug</td><td>Retrieve a single post</td></tr>\n\t<tr><td>GET</td><td>/tags</td><td>_none_</td><td>Retrieve the list of available tags</td></tr>\n\t<tr><td>GET</td><td>/authors</td><td>_none_</td><td>Retrieve the list of authors</td></tr>\n    <tr><td>GET</td><td>/authors/:slug</td><td>slug: slug or email of an author</td><td>Retrieve an author</td></tr>\n    <tr><td>GET</td><td>/authors/:slug/posts</td><td>slug: slug or email of an author</td><td>Retrieve list of posts from given author</td></tr>    \n\t<tr><td>GET</td><td>/status</td><td>_none_</td><td>Retrieve the content status (last update, number of tags, posts, authors, ...)</td></tr>\n\t<tr><td>GET</td><td>/refresh</td><td>_none_</td><td>Force the refresh of the data by retrieving the remote data from the source</td></tr>\n</table>\n\n\n# Assets mapping\n\nIn your config, you can define mapped directories from your source, to a folder and an url.\nFor example:\n\n    exports.assetsToCopy  = [{\n        from: exports.outputFolder + \"/posts/images/\",\n        to:   __dirname + \"/public/images\",\n        url: \"/images/\"\n    }];\n    \nBlogd will copy the content of */posts/images/* from your repository, to the Blogd local directory */public/images* and then map the */public/images/* folder to the url */images/*\nFor example, if you have a file */posts/images/myimage.png* in your repository, you'll be able to access the file to *http://localhost:5555/images/myimage.png*\n\n\n\n\n# Content structure\n\nThe content of the source must be structured this way (you can find an example at [https://github.com/Elao/tech-blog]())\n\n\n##Users file:\nMust be at the root of the repo and named _users.json_\n\n_Example of users.json file:_\n\n    [{\n        \"name\":  \"Vincent\",\n        \"slug\":  \"vincent\",\n        \"email\": \"vincent.bouzeran@elao.com\"\n    },{\n        \"name\":  \"Guewen\",\n        \"slug\":  \"guewen\",\n        \"email\": \"guewen.faivre@elao.com\"\n    }]\n\n\n##Tags file:\nMust be at the root of the repo and be named _tags.json_\nIt contains the allowed tags used in posts. If a post use a tag not referenced in these file, the tag will be ignored.\nProperties *label* and *slug* on tag objets are mandatory, but you can add other metas and you'll get them back through the API.\n\n_Example of tags.json file:_\n\n    [\n        {\"label\": \"Symfony\", \"slug\": \"symfony\"},\n        {\"label\": \"HTML/CSS\", \"slug\": \"html-css\"},\n        {\"label\": \"Webdesign\", \"slug\": \"webdesign\"},\n        {\"label\": \"Framework\", \"slug\": \"framework\"},\n        {\"label\": \"Translation\", \"slug\": \"translation\"},\n        {\"label\": \"Form\", \"slug\": \"form\"},\n        {\"label\": \"Theming\", \"slug\": \"theming\"},\n        {\"label\": \"Linux\", \"slug\": \"linux\"},\n        {\"label\": \"Tips\", \"slug\": \"tips\"},\n        {\"label\": \"Talk\", \"slug\": \"talk\"},\n        {\"label\": \"PHP\", \"slug\": \"php\"}\n    ]\n\n\n##Posts file:\nThe post files must be placed in the /posts folder. Each post must have two files: a markdown file and a meta file.\n\nFor each post, you need to have 2 files in the /posts folder\n\n * The **.md** file that should contains the markdown content of the post\n * The **.meta** file that should contains the meta data for the article.\n\nThe two files must have the same name except the extension.\n\n_Example:_\n\nIf your post is named \"mysuperblogpost\", you must have these two files in the /posts folder:\n\n* **mysuperblogpost.md**     (hold the markdown content of the post)\n* **mysuperblogpost.meta**   (hold the metas of the post)\n\n##Post meta file\nThe post meta file contains information about the associated blog post.\n\nThe metas are like this:\n<table>\n\t<tr><th>Meta</th><th>Description</th></tr>\n\t<tr><td>_slug_ \\*</td><td>The post's slug (used to identify the post. Must be unique among all posts)</td></tr>\n\t<tr><td>_title_ \\*</td><td>The post's title</td></tr>\n\t<tr><td>_tags_</td><td>List of post's tag (must be reference by slug or label of tags contains in the tags's file)</td></tr>\n\t<tr><td>_status_ \\*</td><td>The post's status (\"published\", \"draft\")</td></tr>\n\t<tr><td>_publish_by_ \\*</td><td>The publisher of the post (must be the reference of a user contains in the users's file either by email or slug)</td></tr>\n\t<tr><td>_publish_at_ \\*</td><td>A date (any format supported by Moment.js)</td></tr>\t\n\t<tr><td>_meta_title_</td><td>The html meta title of the post</td></tr>\n\t<tr><td>_meta_description_</td><td>The html meta description of the post</td></tr>\n</table>\n<i><small>* indicate required metas</small></i>\n\n<strong>Additional metas will be exposed by the blogd api.</strong>\n\n\n_Example of a post meta file:_\n\n    {\n        \"tags\":\t           \t\t[\"Symfony2\", \"Toto\", \"Titi\"],\n        \"title\":\t\t\t\t\"My super post from a nice repository\",\n        \"slug\":\t\t\t\t\t\"my-super-post-from-a-nice-repository\",\n        \"status\":\t\t\t\t\"published\",\n        \"meta_title\":\t\t\t\"Imported post from a repository\",\n        \"meta_description\":\t\t\"A super amazing post about everything\",\n        \"publish_by\":\"\t\t\tvincent.bouzeran@elao.com\",\n        \"publish_at\":\t\t\t\"2014-07-06\"\n    }\n\n\n# TODO\n* Add more checks on data\n* Add pagination on _/posts/:tag_ & _/authors_\n* Add a redis store\n","created":"2014-10-20T13:55:49.219Z","modified":"2017-04-03T07:30:48.638Z","lastPublisher":{"name":"elao","email":"hosting@elao.com"},"owners":[{"name":"nervo","email":"hosting@elao.com"}],"other":{"_attachments":{},"_from":".","_id":"blogd","_nodeVersion":"0.10.32","_npmUser":{"name":"elao","email":"hosting@elao.com"},"_npmVersion":"2.1.4","_rev":"2-b7688398fd0dad19deffb68d340546ef","_shasum":"b6dfe30ddf0f6f7ba724aa448299b261b9df63a8","author":{"name":"Elao","email":"contact@elao.com","url":"http://www.elao.com/"},"bugs":{"url":"https://github.com/Elao/blogd/issues"},"directories":{},"dist-tags":{"latest":"0.2.5"},"dist":{"shasum":"b6dfe30ddf0f6f7ba724aa448299b261b9df63a8","tarball":"http://registry.npmjs.org/blogd/-/blogd-0.2.5.tgz"},"maintainers":[{"name":"nervo","email":"hosting@elao.com"}],"readmeFilename":"README.md","time":{"modified":"2017-04-03T07:30:48.638Z","created":"2014-10-20T13:55:49.219Z","0.1.0":"2014-10-20T13:55:49.219Z","0.1.1":"2014-10-20T14:16:27.235Z","0.1.2":"2014-10-20T14:24:02.423Z","0.1.3":"2014-10-20T15:00:24.759Z","0.1.4":"2014-10-20T15:32:27.516Z","0.1.5":"2014-10-21T12:01:56.090Z","0.1.6":"2014-10-22T07:43:42.781Z","0.1.7":"2014-10-22T08:21:34.832Z","0.1.8":"2014-10-22T08:53:11.977Z","0.2.0":"2014-10-23T09:58:41.630Z","0.2.1":"2014-10-23T13:29:05.002Z","0.2.2":"2014-10-29T13:31:55.896Z","0.2.3":"2014-10-29T14:35:18.729Z","0.2.4":"2014-11-03T09:52:17.321Z","0.2.5":"2014-11-04T09:28:39.520Z"}}}